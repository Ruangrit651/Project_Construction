require('dotenv').config();
const puppeteer = require('puppeteer');
const fs = require('fs');

// üîß ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏∑‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ‡∏ß‡∏±‡∏ô/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡∏õ‡∏µ ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á:‡∏ô‡∏≤‡∏ó‡∏µ:‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
function now() {
  const date = new Date();
  const day = String(date.getDate()).padStart(2, '0');
  const month = String(date.getMonth() + 1).padStart(2, '0'); // ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà 0
  const year = date.getFullYear();
  const hours = String(date.getHours()).padStart(2, '0');
  const minutes = String(date.getMinutes()).padStart(2, '0');
  const seconds = String(date.getSeconds()).padStart(2, '0');
  return `${day}/${month}/${year} ${hours}:${minutes}:${seconds}`;
}

// ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå log (‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á)
const logFilename = 'Suspend_performance_log.txt';

(async () => {
  const log = [];
  let browser;

  try {
    // ‡πÄ‡∏õ‡∏¥‡∏î browser ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ã‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
    browser = await puppeteer.launch({
      headless: false,
      args: [
        '--disable-features=PasswordManagerEnabled,AutomaticPasswordSaving',
        '--disable-save-password-bubble'
      ]
    });

    const page = await browser.newPage();

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
    const startLoad = Date.now();
    await page.goto(process.env.APP_URL, { waitUntil: 'networkidle0' });
    const pageLoadTime = Date.now() - startLoad;
    log.push(`üìÖ Timestamp: ${now()}`);
    log.push(`üöÄ Page Load Time: ${pageLoadTime} ms`);

    // ‡∏Å‡∏£‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏° login
    const startLogin = Date.now();
    await page.type('#username', process.env.LOGIN_USERNAME);
    await page.type('#password', process.env.LOGIN_PASSWORD);
    await page.click('button[type="submit"]');
    await page.waitForNavigation({ waitUntil: 'networkidle0' });
    const loginTime = Date.now() - startLogin;
    log.push(`üîê Login Time: ${loginTime} ms`);
    log.push(`‚úÖ Login success: ${page.url()}`);

    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏° Create ‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏•‡∏¥‡∏Å
    await page.waitForSelector('button');
    const buttons = await page.$$('button');
    for (const btn of buttons) {
      const text = await page.evaluate(el => el.textContent.trim(), btn);
      if (text === 'Create') {
        await btn.click();
        log.push('üü¢ Clicked "Create" button');
        break;
      }
    }

    // ‡∏£‡∏≠‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏∂‡πâ‡∏ô
    await page.waitForSelector('input[placeholder="Enter username"]');
    const username = 'testuser_' + Date.now();
    const password = 'testpassword123';

    const startCreate = Date.now();
    await page.type('input[placeholder="Enter username"]', username);
    await page.type('input[placeholder="Enter password"]', password);

    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å option ‡πÅ‡∏£‡∏Å‡πÉ‡∏ô combobox ‡∏ó‡∏∏‡∏Å‡∏≠‡∏±‡∏ô
    const comboboxes = await page.$$('[role="combobox"]');
    for (const box of comboboxes) {
      await box.click();
      await page.waitForSelector('[role="option"]');
      const options = await page.$$('[role="option"]');
      if (options.length > 0) {
        await options[0].click();
      }
    }

    // ‡∏Ñ‡∏•‡∏¥‡∏Å Create ‡πÉ‡∏ô dialog ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    const dialog = await page.$('[role="dialog"], .MuiDialog-root');
    if (dialog) {
      const dialogButtons = await dialog.$$('button');
      for (const btn of dialogButtons) {
        const text = await page.evaluate(el => el.textContent.trim(), btn);
        if (text === 'Create') {
          await btn.click();
          log.push('üü¢ Clicked "Create" button in dialog');
          break;
        }
      }
    }

    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ user ‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    await page.waitForFunction(
      username => [...document.querySelectorAll('td')].some(td => td.textContent.includes(username)),
      { timeout: 5000 },
      username
    );
    const createTime = Date.now() - startCreate;
    log.push(`üë§ Create User Time: ${createTime} ms`);
    log.push(`üë§ New Username: ${username}`);
    log.push(`‚úÖ User created successfully`);

    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ dialog ‡∏õ‡∏¥‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠
    try {
      await page.waitForSelector('.MuiDialog-root, [role="dialog"]', { hidden: true, timeout: 3000 });
    } catch {}

    await new Promise(res => setTimeout(res, 500)); // ‡∏£‡∏≠‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠

    // =================== ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Suspend User ===================
    
    const startSuspend = Date.now();

    // 1. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Suspend ‡∏Ç‡∏≠‡∏á user ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á
    const suspendButtonClicked = await page.evaluate(username => {
      const rows = Array.from(document.querySelectorAll('tr'));
      for (const row of rows) {
        if ([...row.querySelectorAll('td')].some(td => td.textContent.includes(username))) {
          // ‡∏´‡∏≤‡∏õ‡∏∏‡πà‡∏° Suspend (‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤ "Suspend" ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏µ‡πÅ‡∏î‡∏á)
          const suspendButtons = Array.from(row.querySelectorAll('button')).filter(b => 
            b.textContent.trim() === 'Suspend' || 
            b.classList.contains('red') ||
            window.getComputedStyle(b).color.includes('255, 0, 0') // ‡∏™‡∏µ‡πÅ‡∏î‡∏á
          );
          
          if (suspendButtons.length > 0) {
            suspendButtons[0].click();
            return true;
          }
        }
      }
      return false;
    }, username);

    if (!suspendButtonClicked) {
      throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏° Suspend ‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡∏Ç‡∏≠‡∏á user');
    }
    
    const suspendButtonClickTime = Date.now() - startSuspend;
    log.push(`üî¥ Suspend Button Click Time: ${suspendButtonClickTime} ms`);
    log.push('üü¢ Clicked "Suspend" button for the user');

    // 2. ‡∏£‡∏≠‡πÉ‡∏´‡πâ Dialog ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£ Suspend ‡∏õ‡∏£‡∏≤‡∏Å‡∏è
    await page.waitForSelector('[role="dialog"], .MuiDialog-root');
    
    // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô Dialog
    const dialogContentCheck = await page.evaluate((expectedUsername) => {
      const dialog = document.querySelector('[role="dialog"], .MuiDialog-root');
      if (!dialog) return { success: false, reason: 'Dialog not found' };
      
      // // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ Dialog
      // const title = dialog.querySelector('h2, [role="heading"]');
      // if (!title || !title.textContent.includes('Suspend')) {
      //   return { success: false, reason: 'Dialog title does not contain "Suspend"' };
      // }
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      const hasUsername = Array.from(dialog.querySelectorAll('strong, p, span'))
        .some(el => el.textContent.includes(expectedUsername));
      
      if (!hasUsername) {
        return { success: false, reason: 'Dialog does not contain username' };
      }
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
      const hasWarning = Array.from(dialog.querySelectorAll('p, span'))
        .some(el => el.textContent.includes('not be able to log in'));
      
      if (!hasWarning) {
        return { success: false, reason: 'Dialog does not contain warning message' };
      }
      
      return { success: true };
    }, username);
    
    if (dialogContentCheck.success) {
      log.push('‚úÖ Suspend confirmation dialog shows correct content');
    } else {
      log.push(`‚ö†Ô∏è Dialog content issue: ${dialogContentCheck.reason}`);
    }

    // 4. ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "Suspend User" ‡πÉ‡∏ô Dialog
    const startConfirmSuspend = Date.now();
    
    const confirmDialogClicked = await page.evaluate(() => {
      const dialog = document.querySelector('[role="dialog"], .MuiDialog-root');
      if (!dialog) return false;
      
      // ‡∏´‡∏≤‡∏õ‡∏∏‡πà‡∏° Suspend User
      const suspendButtons = Array.from(dialog.querySelectorAll('button')).filter(b => 
        b.textContent.includes('Suspend User')
      );
      
      if (suspendButtons.length > 0) {
        suspendButtons[0].click();
        return true;
      }
      
      return false;
    });
    
    if (!confirmDialogClicked) {
      throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏° "Suspend User" ‡πÉ‡∏ô Dialog');
    }
    
    log.push('üü¢ Clicked "Suspend User" button in confirmation dialog');
    
    // 5. ‡∏£‡∏≠‡πÉ‡∏´‡πâ Dialog ‡∏õ‡∏¥‡∏î‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
    try {
      await page.waitForSelector('[role="dialog"], .MuiDialog-root', { hidden: true, timeout: 5000 });
      log.push('‚úÖ Suspend confirmation dialog closed after confirmation');
    } catch {
      log.push('‚ö†Ô∏è Suspend confirmation dialog did not close after confirmation');
    }
    
    // // 6. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á Toast notification ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    // try {
    //   const toastVisible = await page.waitForFunction(
    //     () => {
    //       const toasts = document.querySelectorAll('.Toastify__toast, [role="alert"], .MuiSnackbar-root');
    //       return toasts.length > 0;
    //     },
    //     { timeout: 3000 }
    //   );
      
    //   if (toastVisible) {
    //     const toastText = await page.evaluate(() => {
    //       const toast = document.querySelector('.Toastify__toast, [role="alert"], .MuiSnackbar-root');
    //       return toast ? toast.textContent : '';
    //     });
        
    //     log.push(`‚úÖ Notification shown: "${toastText}"`);
    //   }
    // } catch {
    //   log.push('‚ÑπÔ∏è No toast notification detected (might be using alert instead)');
    // }
    
    // 7. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å "Suspend" ‡πÄ‡∏õ‡πá‡∏ô "Activate")
    await new Promise(res => setTimeout(res, 1000)); // ‡∏£‡∏≠‡πÉ‡∏´‡πâ UI ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï
    
    const userStatusChange = await page.evaluate(username => {
      const rows = Array.from(document.querySelectorAll('tr'));
      for (const row of rows) {
        if ([...row.querySelectorAll('td')].some(td => td.textContent.includes(username))) {
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô Activate ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          const button = Array.from(row.querySelectorAll('button')).find(b => 
            b.textContent.includes('Activate') || 
            b.classList.contains('green') ||
            window.getComputedStyle(b).color.includes('0, 128, 0') // ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
          );
          
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Suspended ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          const statusCell = [...row.querySelectorAll('td')].find(td => 
            td.textContent.includes('Suspended') || 
            td.textContent.includes('Inactive')
          );
          
          return {
            activateButtonFound: !!button,
            suspendedStatusFound: !!statusCell
          };
        }
      }
      return { activateButtonFound: false, suspendedStatusFound: false };
    }, username);
    
    const confirmSuspendTime = Date.now() - startConfirmSuspend;
    log.push(`‚è±Ô∏è Confirm Suspend Processing Time: ${confirmSuspendTime} ms`);
    
    if (userStatusChange.activateButtonFound) {
      log.push('‚úÖ User status changed: "Suspend" button changed to "Activate"');
    } else {
      log.push('‚ö†Ô∏è Could not verify button change to "Activate"');
    }
    
    if (userStatusChange.suspendedStatusFound) {
      log.push('‚úÖ User status indicator shows "Suspended" or "Inactive"');
    }
    
    // ‡∏£‡∏ß‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Suspend
    const totalSuspendTime = Date.now() - startSuspend;
    log.push(`‚è±Ô∏è Total Suspend User Time: ${totalSuspendTime} ms`);
    log.push(`üåê Final URL: ${page.url()}`);
    log.push(`üìä Suspend Success: ${userStatusChange.activateButtonFound ? 'Yes' : 'Unconfirmed'}`);

    // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ö‡∏ö‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö
    fs.writeFileSync(logFilename, log.join('\n'), 'utf8');
    console.log('\nüìù Log saved to', logFilename);
    console.log(log.join('\n'));

  } catch (err) {
    const errorLog = `[${now()}] ‚ùå Unexpected error: ${err.message}`;
    console.error(errorLog);
    log.push(errorLog);
    fs.writeFileSync(logFilename, log.join('\n'), 'utf8');
  } finally {
    await browser?.close();
  }
})();