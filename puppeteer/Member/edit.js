require('dotenv').config(); // ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå .env ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°
const puppeteer = require('puppeteer'); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Puppeteer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° browser
const fs = require('fs'); // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå log

// üîß ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏∑‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ‡∏ß‡∏±‡∏ô/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡∏õ‡∏µ ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á:‡∏ô‡∏≤‡∏ó‡∏µ:‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
function now() {
  const date = new Date();
  const day = String(date.getDate()).padStart(2, '0');
  const month = String(date.getMonth() + 1).padStart(2, '0'); // ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà 0
  const year = date.getFullYear();
  const hours = String(date.getHours()).padStart(2, '0');
  const minutes = String(date.getMinutes()).padStart(2, '0');
  const seconds = String(date.getSeconds()).padStart(2, '0');
  return `${day}/${month}/${year} ${hours}:${minutes}:${seconds}`;
}

const logFilename = 'Edit_performance_log.txt'; // ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå log ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

(async () => {
  const log = []; // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° log
  let browser;

  try {
    // ‡πÄ‡∏õ‡∏¥‡∏î browser ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô headless (‡πÄ‡∏´‡πá‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠)
    browser = await puppeteer.launch({
      headless: false,
      args: [
        '--disable-features=PasswordManagerEnabled,AutomaticPasswordSaving',
        '--disable-save-password-bubble'
      ]
    });

    const page = await browser.newPage();

    // ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏´‡∏•‡∏±‡∏Å
    const startLoad = Date.now();
    await page.goto(process.env.APP_URL, { waitUntil: 'networkidle0' });
    const pageLoadTime = Date.now() - startLoad;
    log.push(`üìÖ Timestamp: ${now()}`);
    log.push(`üöÄ Page Load Time: ${pageLoadTime} ms`);

    // ‡∏Å‡∏£‡∏≠‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏° Login
    const startLogin = Date.now();
    await page.type('#username', process.env.LOGIN_USERNAME);
    await page.type('#password', process.env.LOGIN_PASSWORD);
    await page.click('button[type="submit"]');
    await page.waitForNavigation({ waitUntil: 'networkidle0' });
    const loginTime = Date.now() - startLogin;
    log.push(`üîê Login Time: ${loginTime} ms`);
    log.push(`‚úÖ Login success: ${page.url()}`);

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° "Create"
    await page.waitForSelector('button');
    const buttons = await page.$$('button');
    for (const btn of buttons) {
      const text = await page.evaluate(el => el.textContent.trim(), btn);
      if (text === 'Create') {
        await btn.click();
        log.push('üü¢ Clicked "Create" button');
        break;
      }
    }

    // ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á user ‡πÉ‡∏´‡∏°‡πà
    await page.waitForSelector('input[placeholder="Enter username"]');
    const username = 'testuser_' + Date.now(); // ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠ username ‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
    const password = 'testpassword123';

    const startCreate = Date.now();
    await page.type('input[placeholder="Enter username"]', username);
    await page.type('input[placeholder="Enter password"]', password);

    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å role ‡πÅ‡∏•‡∏∞ project ‡πÉ‡∏ô combobox
    const comboboxes = await page.$$('[role="combobox"]');
    for (const box of comboboxes) {
      await box.click();
      await page.waitForSelector('[role="option"]');
      const options = await page.$$('[role="option"]');
      if (options.length > 0) {
        await options[0].click();
      }
    }

    // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Create ‡πÉ‡∏ô dialog
    const dialog = await page.$('[role="dialog"], .MuiDialog-root');
    if (dialog) {
      const dialogButtons = await dialog.$$('button');
      for (const btn of dialogButtons) {
        const text = await page.evaluate(el => el.textContent.trim(), btn);
        if (text === 'Create') {
          await btn.click();
          log.push('üü¢ Clicked "Create" button in dialog');
          break;
        }
      }
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß (‡∏´‡∏≤ username ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á)
    await page.waitForFunction(
      username => [...document.querySelectorAll('td')].some(td => td.textContent.includes(username)),
      { timeout: 5000 },
      username
    );
    const createTime = Date.now() - startCreate;
    log.push(`üë§ Create User Time: ${createTime} ms`);
    log.push(`üë§ New Username: ${username}`);
    log.push(`‚úÖ User created successfully`);

    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ dialog ‡∏õ‡∏¥‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠
    try {
      await page.waitForSelector('.MuiDialog-root, [role="dialog"]', { hidden: true, timeout: 3000 });
    } catch {}
    await new Promise(res => setTimeout(res, 500)); // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡∏£‡∏≠‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢

    // =================== ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ Edit User ===================

    const startEdit = Date.now();

    // ‡∏´‡∏≤‡∏õ‡∏∏‡πà‡∏° Edit ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡∏≠‡∏á user ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏•‡∏¥‡∏Å
    const editButtonClicked = await page.evaluate(username => {
      const rows = Array.from(document.querySelectorAll('tr'));
      for (const row of rows) {
        if ([...row.querySelectorAll('td')].some(td => td.textContent.includes(username))) {
          const btn = Array.from(row.querySelectorAll('button')).find(b => b.textContent.trim() === 'Edit');
          if (btn) {
            btn.click();
            return true;
          }
        }
      }
      return false;
    }, username);

    if (!editButtonClicked) throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏° Edit ‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡∏Ç‡∏≠‡∏á user');

    const editButtonClickTime = Date.now() - startEdit;
    log.push(`üñäÔ∏è Edit Button Click Time: ${editButtonClickTime} ms`);
    log.push('üü¢ Clicked "Edit" button for the user');

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ dialog ‡πÅ‡∏™‡∏î‡∏á username ‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    await page.waitForSelector('[role="dialog"], .MuiDialog-root');
    const initialDataCorrect = await page.evaluate((expectedUsername) => {
      const currentUsernameElement = Array.from(document.querySelectorAll('label'))
        .find(el => el.textContent.includes('Current Username:'));
      return currentUsernameElement && currentUsernameElement.textContent.includes(expectedUsername);
    }, username);

    if (initialDataCorrect) {
      log.push('‚úÖ Edit dialog shows correct initial data');
    } else {
      log.push('‚ö†Ô∏è Edit dialog may not show correct initial data');
    }

    // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠ username ‡πÉ‡∏´‡∏°‡πà
    const newUsername = `edited_${username}`;
    await page.evaluate(() => {
      const usernameInput = document.querySelector('input[placeholder="Enter new username"]');
      if (usernameInput) usernameInput.value = '';
    });

    const startFormEdit = Date.now();
    await page.type('input[placeholder="Enter new username"]', newUsername);
    log.push(`üë§ Changed username to: ${newUsername}`);

    // ‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô role ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á (‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)
    const editComboboxes = await page.$$('[role="combobox"]');
    if (editComboboxes.length > 0) {
      try {
        await editComboboxes[0].click();
        await page.waitForSelector('[role="option"]');
        const options = await page.$$('[role="option"]');
        if (options.length > 1) {
          await options[1].click();
          log.push('‚úÖ Changed role selection');
        }
      } catch (e) {
        log.push(`‚ö†Ô∏è Could not change role: ${e.message}`);
      }
    }

    const formEditTime = Date.now() - startFormEdit;
    log.push(`‚å®Ô∏è Form Edit Time: ${formEditTime} ms`);

    const startSave = Date.now();

    // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Update ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
    const editDialog = await page.$('[role="dialog"], .MuiDialog-root');
    const saveButtons = await editDialog.$$('button');
    let saveClicked = false;

    for (const btn of saveButtons) {
      const text = await page.evaluate(el => el.textContent.trim(), btn);
      if (text === 'Update') {
        await btn.click();
        saveClicked = true;
        log.push('üü¢ Clicked "Update" button to save changes');

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ error ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° username ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        try {
          const duplicateErrorAppeared = await page.waitForFunction(() => {
            const errorTexts = Array.from(document.querySelectorAll('*')).map(el => el.textContent);
            return errorTexts.some(text =>
              text.includes('username already exists') || 
              text.includes('Username already in use') || 
              text.includes('‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß')
            );
          }, { timeout: 3000 });

          if (duplicateErrorAppeared) {
            log.push('‚ùå Cannot update: Username already exists');
            fs.writeFileSync(logFilename, log.join('\n'), 'utf8');
            console.log('\nüìù Log saved to', logFilename);
            console.log(log.join('\n'));
            await browser.close();
            return;
          }
        } catch {
          // ‡πÑ‡∏°‡πà‡∏û‡∏ö error ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        }

        break;
      }
    }

    if (!saveClicked) throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏° Update ‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏° Edit');

    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ dialog ‡∏õ‡∏¥‡∏î
    try {
      await page.waitForSelector('.MuiDialog-root, [role="dialog"]', { hidden: true, timeout: 5000 });
      log.push('‚úÖ Edit dialog closed after update');
    } catch {
      log.push('‚ö†Ô∏è Edit dialog did not close after update');
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏£‡∏¥‡∏á
    let updateSuccessful = false;
    try {
      await page.waitForFunction(
        newUsername => [...document.querySelectorAll('td')].some(td => td.textContent.includes(newUsername)),
        { timeout: 5000 },
        newUsername
      );
      updateSuccessful = true;
      log.push('‚úÖ User updated successfully in table');
    } catch (e) {
      log.push(`‚ö†Ô∏è Could not verify user update in table: ${e.message}`);
    }

    const saveTime = Date.now() - startSave;
    log.push(`üíæ Save and Update Time: ${saveTime} ms`);

    const totalEditTime = Date.now() - startEdit;
    log.push(`‚è±Ô∏è Total Edit User Time: ${totalEditTime} ms`);
    log.push(`üåê Final URL: ${page.url()}`);
    log.push(`üìä Update Success: ${updateSuccessful ? 'Yes' : 'No'}`);

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
    fs.writeFileSync(logFilename, log.join('\n'), 'utf8');
    console.log('\nüìù Log saved to', logFilename);
    console.log(log.join('\n'));

  } catch (err) {
    // ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Å‡∏¥‡∏î error ‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î
    const errorLog = `[${now()}] ‚ùå Unexpected error: ${err.message}`;
    console.error(errorLog);
    log.push(errorLog);
    fs.writeFileSync(logFilename, log.join('\n'), 'utf8');
  } finally {
    await browser?.close(); // ‡∏õ‡∏¥‡∏î browser ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
  }
})();
