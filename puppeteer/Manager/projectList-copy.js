require('dotenv').config();
const puppeteer = require('puppeteer');
const fs = require('fs');
const path = require('path');
const { performance } = require('perf_hooks');

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡∏õ‡∏µ ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á:‡∏ô‡∏≤‡∏ó‡∏µ:‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
function now() {
  const date = new Date();
  const day = String(date.getDate()).padStart(2, '0');
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const year = date.getFullYear();
  const hours = String(date.getHours()).padStart(2, '0');
  const minutes = String(date.getMinutes()).padStart(2, '0');
  const seconds = String(date.getSeconds()).padStart(2, '0');
  return `${day}/${month}/${year} ${hours}:${minutes}:${seconds}`;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á screenshot directory ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
function ensureDirectoryExists(directory) {
  if (!fs.existsSync(directory)) {
    fs.mkdirSync(directory, { recursive: true });
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° Subtask
async function testAddSubtask() {
  const browser = await puppeteer.launch({
    headless: false,
    args: [
      '--disable-features=PasswordManagerEnabled,AutomaticPasswordSaving',
      '--disable-save-password-bubble',
      '--start-maximized'
    ]
  });
  
  const page = await browser.newPage();
  const logs = [];
  const screenshotDir = path.join(__dirname, 'screenshots');
  ensureDirectoryExists(screenshotDir);
  const logFilename = path.join(__dirname, `AddSubtask_Log_${Date.now()}.txt`);

  try {
    logs.push(`üìÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤: ${now()}`);
    const loadStart = performance.now();

    // 1. ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å Login
    logs.push('üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ Login');
    await page.goto(process.env.APP_URL, { waitUntil: 'networkidle0' });
    await page.screenshot({ path: path.join(screenshotDir, '01-login-page.png') });
    logs.push('‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤ Login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

    // ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Login
    await page.waitForSelector('#username');
    await page.waitForSelector('#password');
    await page.type('#username', process.env.LOGIN_USERNAME_MANAGER);
    await page.type('#password', process.env.LOGIN_PASSWORD_MANAGER);
    await page.screenshot({ path: path.join(screenshotDir, '02-filled-login.png') });
    logs.push('‚úÖ ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Login ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');

    // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Login ‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á
    const loginStart = performance.now();
    await Promise.all([
      page.click('button[type="submit"]'),
      page.waitForNavigation({ waitUntil: 'networkidle0' }),
    ]);
    const loginEnd = performance.now();
    logs.push(`‚úÖ Login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ ${(loginEnd - loginStart).toFixed(2)} ms`);
    await page.screenshot({ path: path.join(screenshotDir, '03-after-login.png') });

    // 2. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ Project List
    logs.push('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ');
    const navigateToProjectsStart = performance.now();
    await page.goto(`${process.env.APP_URL}/ManagerProjectList`, { waitUntil: 'networkidle0' });
    const navigateToProjectsEnd = performance.now();
    logs.push(`‚úÖ ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ ${(navigateToProjectsEnd - navigateToProjectsStart).toFixed(2)} ms`);
    
    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
    await page.waitForFunction(() => {
      return !document.querySelector('.animate-spin') &&
        (document.querySelector('table tbody tr') || document.querySelector('table tbody td.text-center'));
    }, { timeout: 10000 });
    await page.screenshot({ path: path.join(screenshotDir, '04-project-list.png') });

    // 3. ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÅ‡∏£‡∏Å
    logs.push('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÅ‡∏£‡∏Å‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
    const projectName = await page.evaluate(() => {
      const firstRow = document.querySelector('table tbody tr');
      if (firstRow) {
        const projectNameCell = firstRow.querySelector('td:nth-child(2)');
        return projectNameCell ? projectNameCell.innerText : 'Unknown Project';
      }
      return 'Unknown Project';
    });
    logs.push(`üîç ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ: "${projectName}"`);

    // ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
    const navigateToTasksStart = performance.now();
    await Promise.all([
      page.click('table tbody tr'),
      page.waitForNavigation({ waitUntil: 'networkidle0' }),
    ]);
    const navigateToTasksEnd = performance.now();
    logs.push(`‚úÖ ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ ${(navigateToTasksEnd - navigateToTasksStart).toFixed(2)} ms`);
    await page.screenshot({ path: path.join(screenshotDir, '05-task-list.png') });

    // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ tasks ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const tasksExist = await page.evaluate(() => {
      const rows = document.querySelectorAll('table tbody tr');
      return rows.length > 0;
    });

    if (!tasksExist) {
      logs.push('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Subtask ‡πÑ‡∏î‡πâ');
      throw new Error('No tasks available to test subtasks');
    }

    logs.push('‚úÖ ‡∏û‡∏ö‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö');

    // 5. ‡∏Ç‡∏¢‡∏≤‡∏¢ Task ‡πÅ‡∏£‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π Subtasks
    logs.push('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ç‡∏¢‡∏≤‡∏¢ Task ‡πÅ‡∏£‡∏Å');
    const hasExpandButton = await page.evaluate(() => {
      const expandButtons = document.querySelectorAll('button[aria-label="Toggle task details"]');
      if (expandButtons.length > 0) {
        expandButtons[0].click();
        return true;
      }
      return false;
    });

    if (hasExpandButton) {
      logs.push('‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß');
      // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• subtasks ‡πÇ‡∏´‡∏•‡∏î
      await page.waitForTimeout(1000);
    }

    // 6. ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á Task ‡∏´‡∏•‡∏±‡∏Å
    const taskInfo = await page.evaluate(() => {
      const firstRow = document.querySelector('table tbody tr');
      let taskName = 'Unknown Task';
      let taskDates = { start_date: null, end_date: null };

      if (firstRow) {
        // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠ Task
        const taskNameCell = firstRow.querySelector('td:nth-child(2)');
        if (taskNameCell) {
          taskName = taskNameCell.innerText;
        }

        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß
        const allCells = firstRow.querySelectorAll('td');
        allCells.forEach(cell => {
          const text = cell.innerText;
          // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà YYYY-MM-DD
          const dateMatch = text.match(/\d{4}-\d{2}-\d{2}/g);
          if (dateMatch && dateMatch.length >= 2) {
            taskDates.start_date = dateMatch[0];
            taskDates.end_date = dateMatch[1];
          }
        });

        // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö ‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ç‡∏¢‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
        if (!taskDates.start_date || !taskDates.end_date) {
          const expandedInfo = document.querySelector('.expanded-task-info, .task-details');
          if (expandedInfo) {
            const expandedText = expandedInfo.innerText;
            const dateMatches = expandedText.match(/\d{4}-\d{2}-\d{2}/g);
            if (dateMatches && dateMatches.length >= 2) {
              taskDates.start_date = dateMatches[0];
              taskDates.end_date = dateMatches[1];
            }
          }
        }

        // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏µ‡∏Å ‡πÉ‡∏´‡πâ‡∏î‡∏π‡πÉ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏ô‡πâ‡∏≤
        if (!taskDates.start_date || !taskDates.end_date) {
          const allText = document.body.innerText;
          const dateMatches = allText.match(/\d{4}-\d{2}-\d{2}/g);
          if (dateMatches && dateMatches.length >= 2) {
            taskDates.start_date = dateMatches[0];
            taskDates.end_date = dateMatches[dateMatches.length - 1]; // ‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏£‡∏Å‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏û‡∏ö
          }
        }
      }

      return { taskName, taskDates };
    });

    logs.push(`üîç Task ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: "${taskInfo.taskName}"`);
    logs.push(`üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á Task: ${taskInfo.taskDates.start_date || '‡πÑ‡∏°‡πà‡∏û‡∏ö'} ‡∏ñ‡∏∂‡∏á ${taskInfo.taskDates.end_date || '‡πÑ‡∏°‡πà‡∏û‡∏ö'}`);

    // 7. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Add Subtask
    logs.push('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Add Subtask');
    const addButtonClicked = await page.evaluate(() => {
      const addButtons = Array.from(document.querySelectorAll('button'));
      const addSubtaskBtn = addButtons.find(btn =>
        btn.textContent.includes('+ Add') && !btn.textContent.includes('Task')
      );
      if (addSubtaskBtn) {
        addSubtaskBtn.click();
        return true;
      }
      return false;
    });

    if (!addButtonClicked) {
      logs.push('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏° Subtask');
      throw new Error('Add Subtask button not found');
    }

    // 8. ‡∏£‡∏≠‡πÉ‡∏´‡πâ Dialog ‡πÄ‡∏õ‡∏¥‡∏î
    await page.waitForSelector('[role="dialog"]', { timeout: 5000 });
    logs.push('‚úÖ Dialog ‡πÄ‡∏û‡∏¥‡πà‡∏° Subtask ‡πÄ‡∏õ‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß');
    await page.screenshot({ path: path.join(screenshotDir, '06-add-subtask-dialog.png') });

    // 9. ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Subtask
    const subtaskName = `Test Subtask ${Date.now()}`;
    await page.type('input[placeholder="Enter subtask name"]', subtaskName);
    logs.push(`‚úÖ ‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠ Subtask: ${subtaskName}`);

    await page.type('input[placeholder="Enter description"]', 'This is an automated test subtask');
    logs.push('‚úÖ ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ Subtask');

    // 10. ‡∏Å‡∏£‡∏≠‡∏Å‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
    await page.evaluate(() => {
      const budgetInput = document.querySelector('input[placeholder="Enter budget"]');
      if (budgetInput) budgetInput.value = '';
    });
    await page.type('input[placeholder="Enter budget"]', '5000');
    logs.push('‚úÖ ‡∏Å‡∏£‡∏≠‡∏Å‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: 5,000');

    // 11. ‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á Task ‡∏´‡∏•‡∏±‡∏Å
    let startDateStr, endDateStr;

    // ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á Task ‡∏´‡∏•‡∏±‡∏Å ‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πâ‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏Ç‡∏≠‡∏á Task ‡∏´‡∏•‡∏±‡∏Å
    if (taskInfo.taskDates.start_date && taskInfo.taskDates.end_date) {
      const taskStartDate = new Date(taskInfo.taskDates.start_date);
      const taskEndDate = new Date(taskInfo.taskDates.end_date);
      
      // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ subtask ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö task ‡∏´‡∏•‡∏±‡∏Å
      const subtaskStartDate = new Date(taskStartDate);
      
      // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ subtask ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô task ‡∏´‡∏•‡∏±‡∏Å 1 ‡∏ß‡∏±‡∏ô
      const subtaskEndDate = new Date(taskEndDate);
      subtaskEndDate.setDate(subtaskEndDate.getDate() - 1);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
      if (subtaskEndDate <= subtaskStartDate) {
        subtaskEndDate.setDate(subtaskStartDate.getDate() + 1);
      }
      
      startDateStr = subtaskStartDate.toISOString().split('T')[0];
      endDateStr = subtaskEndDate.toISOString().split('T')[0];
      
      logs.push(`üìÖ ‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏° Task ‡∏´‡∏•‡∏±‡∏Å: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô=${startDateStr}, ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î=${endDateStr}`);
    } else {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á Task ‡∏´‡∏•‡∏±‡∏Å ‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏•‡∏∞ +7 ‡∏ß‡∏±‡∏ô
      const today = new Date();
      const nextWeek = new Date(today);
      nextWeek.setDate(today.getDate() + 7);
      
      startDateStr = today.toISOString().split('T')[0];
      endDateStr = nextWeek.toISOString().split('T')[0];
      
      logs.push(`üìÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á Task ‡∏´‡∏•‡∏±‡∏Å ‡∏à‡∏∂‡∏á‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏•‡∏∞ +7 ‡∏ß‡∏±‡∏ô: ${startDateStr} ‡∏ñ‡∏∂‡∏á ${endDateStr}`);
    }

    // ‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°
    await page.evaluate((date) => {
      const startDateInputs = document.querySelectorAll('input[type="date"]');
      if (startDateInputs.length > 0) {
        startDateInputs[0].value = date;
        startDateInputs[0].dispatchEvent(new Event('input', { bubbles: true }));
        startDateInputs[0].dispatchEvent(new Event('change', { bubbles: true }));
      }
    }, startDateStr);
    logs.push(`‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: ${startDateStr}`);

    // ‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
    await page.evaluate((date) => {
      const dateInputs = document.querySelectorAll('input[type="date"]');
      if (dateInputs.length > 1) {
        dateInputs[1].value = date;
        dateInputs[1].dispatchEvent(new Event('input', { bubbles: true }));
        dateInputs[1].dispatchEvent(new Event('change', { bubbles: true }));
      }
    }, endDateStr);
    logs.push(`‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î: ${endDateStr}`);

    // 12. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ In Progress
    await page.evaluate(() => {
      const statusTrigger = document.querySelector('[role="dialog"] [role="combobox"]');
      if (statusTrigger) statusTrigger.click();
    });
    
    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ dropdown ‡πÄ‡∏õ‡∏¥‡∏î
    await page.waitForFunction(() => {
      const trigger = document.querySelector('[role="dialog"] [role="combobox"]');
      return trigger && trigger.getAttribute('data-state') === 'open';
    });
    logs.push('‚úÖ Status dropdown ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß');
    
    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å In Progress
    await page.evaluate(() => {
      const options = Array.from(document.querySelectorAll('[role="option"]'));
      const inProgressOption = options.find(option =>
        option.textContent.toLowerCase().includes('in progress')
      );
      if (inProgressOption) inProgressOption.click();
    });
    logs.push('‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô In Progress');
    
    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ dropdown ‡∏õ‡∏¥‡∏î
    await page.waitForFunction(() => {
      const trigger = document.querySelector('[role="dialog"] [role="combobox"]');
      return !trigger || trigger.getAttribute('data-state') !== 'open';
    });

    // 13. ‡∏Å‡∏£‡∏≠‡∏Å progress percentage
    await page.evaluate(() => {
      const progressInput = document.querySelector('input[type="number"]');
      if (progressInput) {
        progressInput.value = '';
        progressInput.focus();
      }
    });
    await page.type('input[type="number"]', '50');
    logs.push('‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤: 50%');
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö
    await page.screenshot({ path: path.join(screenshotDir, '07-filled-subtask-form.png') });

    // 14. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Add Subtask ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    const addSubtaskStart = performance.now();
    
    // ‡∏´‡∏≤‡∏õ‡∏∏‡πà‡∏° Add Subtask ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Dialog
    await page.evaluate(() => {
      const dialogButtons = Array.from(document.querySelectorAll('[role="dialog"] button'));
      const addButton = dialogButtons.find(btn => 
        btn.textContent.includes('Add Subtask') || 
        (btn.type === 'submit' && !btn.textContent.includes('Cancel'))
      );
      
      if (addButton) {
        addButton.click();
      } else {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Add Subtask ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        const possibleSubmitButtons = dialogButtons.filter(btn => 
          !btn.textContent.includes('Cancel') && 
          !btn.textContent.includes('Close')
        );
        
        if (possibleSubmitButtons.length > 0) {
          // ‡πÉ‡∏ä‡πâ‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
          possibleSubmitButtons[0].click();
        }
      }
    });
    
    logs.push('üîÑ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏° Subtask ‡πÅ‡∏•‡πâ‡∏ß');

    // 15. ‡∏£‡∏≠‡πÉ‡∏´‡πâ dialog ‡∏õ‡∏¥‡∏î
    try {
      await page.waitForFunction(() => !document.querySelector('[role="dialog"]'), { timeout: 10000 });
      const addSubtaskEnd = performance.now();
      logs.push(`‚úÖ Subtask ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÉ‡∏ô ${(addSubtaskEnd - addSubtaskStart).toFixed(2)} ms`);
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° Subtask
      await page.screenshot({ path: path.join(screenshotDir, '08-after-adding-subtask.png') });
    } catch (error) {
      logs.push('‚ùå Dialog ‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏î Add Subtask - ‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î');
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
      await page.screenshot({ path: path.join(screenshotDir, '08-error-dialog.png') });
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error
      const errorMessage = await page.evaluate(() => {
        const errorElements = document.querySelectorAll('.text-red-500, .text-error, .error-message');
        for (const el of errorElements) {
          if (el.innerText.trim() !== '') {
            return el.innerText;
          }
        }
        return document.body.innerText.includes('required fields') ? 
          'Please fill out all required fields properly.' : 'Unknown error';
      });
      
      logs.push(`‚ùå ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${errorMessage}`);
      
      // ‡∏•‡∏≠‡∏á‡∏õ‡∏¥‡∏î dialog ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏ï‡πà‡∏≠
      await page.evaluate(() => {
        const buttons = Array.from(document.querySelectorAll('button'));
        const cancelBtn = buttons.find(btn => btn.textContent.includes('Cancel'));
        if (cancelBtn) cancelBtn.click();
      });
    }

    // 16. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ subtask ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    await page.waitForTimeout(2000); // ‡∏£‡∏≠‡πÉ‡∏´‡πâ UI ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï
    
    const subtaskAdded = await page.evaluate((name) => {
      // ‡∏•‡∏≠‡∏á‡∏´‡∏≤ subtask ‡πÉ‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
      const pageContent = document.body.innerText;
      return pageContent.includes(name);
    }, subtaskName);

    if (subtaskAdded) {
      logs.push(`‚úÖ ‡∏û‡∏ö Subtask "${subtaskName}" ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`);
      await page.screenshot({ path: path.join(screenshotDir, '09-subtask-verified.png') });
    } else {
      logs.push(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Subtask "${subtaskName}" ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°`);
      await page.screenshot({ path: path.join(screenshotDir, '09-subtask-not-found.png') });
    }

    // ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    logs.push('');
    logs.push('üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° Subtask');
    logs.push('‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î Dialog: ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    logs.push('‚úÖ ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    logs.push(`${subtaskAdded ? '‚úÖ' : '‚ùå'} ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•: ${subtaskAdded ? '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' : '‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'}`);
    
    const testEndTime = performance.now();
    logs.push(`‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${((testEndTime - loadStart) / 1000).toFixed(2)} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`);
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å logs
    fs.writeFileSync(logFilename, logs.join('\n'), 'utf8');
    console.log(`\nüìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log ‡πÑ‡∏õ‡∏ó‡∏µ‡πà ${logFilename}`);
    
    return {
      success: subtaskAdded,
      logs: logs,
      screenshots: screenshotDir
    };
    
  } catch (error) {
    const errMsg = `[${now()}] ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î: ${error.message}`;
    console.error(errMsg);
    logs.push(errMsg);
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    await page.screenshot({ path: path.join(screenshotDir, 'error-screenshot.png') });
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å logs
    fs.writeFileSync(logFilename, logs.join('\n'), 'utf8');
    
    return {
      success: false,
      error: error.message,
      logs: logs,
      screenshots: screenshotDir
    };
  } finally {
    await new Promise(r => setTimeout(r, 2000));
    await browser?.close();
  }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
if (require.main === module) {
  (async () => {
    console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏° Subtask...');
    const result = await testAddSubtask();
    console.log(`üèÅ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ${result.success ? '‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' : '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'}`);
  })();
}

module.exports = { testAddSubtask };