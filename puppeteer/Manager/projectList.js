require('dotenv').config(); // ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå .env
const puppeteer = require('puppeteer'); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Puppeteer
const fs = require('fs'); // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
const { performance } = require('perf_hooks'); // ‡πÉ‡∏ä‡πâ‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô

// üîß ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏∑‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ‡∏ß‡∏±‡∏ô/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡∏õ‡∏µ ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á:‡∏ô‡∏≤‡∏ó‡∏µ:‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
function now() {
  const date = new Date();
  const day = String(date.getDate()).padStart(2, '0');
  const month = String(date.getMonth() + 1).padStart(2, '0'); // ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà 0
  const year = date.getFullYear();
  const hours = String(date.getHours()).padStart(2, '0');
  const minutes = String(date.getMinutes()).padStart(2, '0');
  const seconds = String(date.getSeconds()).padStart(2, '0');
  return `${day}/${month}/${year} ${hours}:${minutes}:${seconds}`;
}

(async () => {
  let browser;
  const logs = []; // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö log ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

  try {
    // ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î option
    browser = await puppeteer.launch({
      headless: false, // ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå
      args: [
        '--disable-features=PasswordManagerEnabled,AutomaticPasswordSaving', // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        '--disable-save-password-bubble'
      ]
    });

    const page = await browser.newPage(); // ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà

    // ‡∏î‡∏±‡∏Å‡∏à‡∏±‡∏ö log ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
    page.on('console', msg => console.log(`[${now()}] PAGE LOG:`, msg.text()));

    // ‡∏î‡∏±‡∏Å‡∏à‡∏±‡∏ö response ‡∏ó‡∏µ‡πà error ‡∏à‡∏≤‡∏Å server
    page.on('response', async response => {
      if (!response.ok()) {
        const body = await response.text();
        console.log(`[${now()}] ‚ùó RESPONSE ERROR (${response.status()}) ${response.url()}:\n${body}`);
      }
    });

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤ Login
    logs.push(`üìÖ Timestamp: ${now()}`);
    const loadStart = performance.now();
    await page.goto(process.env.APP_URL, { waitUntil: 'networkidle0' });
    const loadEnd = performance.now();
    const pageLoadTime = (loadEnd - loadStart).toFixed(2);
    logs.push(`üöÄ Login Page Load Time: ${pageLoadTime} ms`);

    // ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
    await page.waitForSelector('#username');
    await page.waitForSelector('#password');
    await page.type('#username', process.env.LOGIN_USERNAME_MANAGER);
    await page.type('#password', process.env.LOGIN_PASSWORD_MANAGER);
    await new Promise(r => setTimeout(r, 800)); // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏û‡∏≠‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

    // ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤
    const loginStart = performance.now();
    await Promise.all([
      page.click('button[type="submit"]'),
      page.waitForNavigation({ waitUntil: 'networkidle0' }),
    ]);
    const loginEnd = performance.now();
    const loginTime = (loginEnd - loginStart).toFixed(2);
    logs.push(`üîê Login Time: ${loginTime} ms`);

    // ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤ Project List Manager
    const navigateStart = performance.now();
    await page.goto(`${process.env.APP_URL}/ManagerProjectList`, { waitUntil: 'networkidle0' });
    const navigateEnd = performance.now();
    const navigationTime = (navigateEnd - navigateStart).toFixed(2);
    logs.push(`üß≠ Navigation to Project List Time: ${navigationTime} ms`);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ header ‡∏Ç‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const headerExists = await page.evaluate(() => {
      const header = document.querySelector('h1');
      return header && header.innerText.includes('Projects');
    });
    logs.push(`üìã Projects Header Exists: ${headerExists ? '‚úÖ' : '‚ùå'}`);

    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡πÄ‡∏™‡∏£‡πá‡∏à
    await page.waitForFunction(() => {
      return !document.querySelector('.animate-spin') &&
        (document.querySelector('table tbody tr') || 
         document.querySelector('table tbody td.text-center'));
    }, { timeout: 10000 });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const projectsInfo = await page.evaluate(() => {
      const noProjectsElement = document.querySelector('table tbody td.text-center');
      if (noProjectsElement && noProjectsElement.innerText.includes('No projects available')) {
        return { hasProjects: false, count: 0, message: 'No projects available' };
      }
      
      const rows = document.querySelectorAll('table tbody tr');
      return {
        hasProjects: rows.length > 0,
        count: rows.length,
        columns: Array.from(document.querySelectorAll('table thead th')).map(th => th.innerText)
      };
    });

    if (projectsInfo.hasProjects) {
      logs.push(`üìä Projects Loaded: ‚úÖ (${projectsInfo.count} projects)`);
      logs.push(`üîç Table Columns: ${projectsInfo.columns.join(', ')}`);
      
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
      if (projectsInfo.count > 0) {
        const firstProjectInfo = await page.evaluate(() => {
          const firstRow = document.querySelector('table tbody tr');
          const projectName = firstRow.querySelector('td').innerText;
          const projectId = firstRow.getAttribute('key') || 'unknown';
          return { projectName, projectId };
        });
        
        logs.push(`üîé First Project: ${firstProjectInfo.projectName} (ID: ${firstProjectInfo.projectId})`);
        
        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤ ManagerTask ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå
        const clickStart = performance.now();
        await Promise.all([
          page.click('table tbody tr'),
          page.waitForNavigation({ waitUntil: 'networkidle0' }),
        ]);
        const clickEnd = performance.now();
        const clickTime = (clickEnd - clickStart).toFixed(2);
        
        const currentUrl = page.url();
        const navigatedCorrectly = currentUrl.includes('/ManagerTask') && 
                                  currentUrl.includes('project_id=') && 
                                  currentUrl.includes('project_name=');
        
        logs.push(`üñ±Ô∏è Project Click Navigation Time: ${clickTime} ms`);
        logs.push(`üîÄ Navigated to ManagerTask: ${navigatedCorrectly ? '‚úÖ' : '‚ùå'}`);
        logs.push(`üåê Final URL: ${currentUrl}`);
      }
    } else {
      logs.push(`üìä Projects: ${projectsInfo.message}`); //‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Ñ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    }
    await new Promise(r => setTimeout(r, 2000));

    // ‡πÅ‡∏™‡∏î‡∏á log ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô console
    console.log('\n' + logs.join('\n') + '\n');

    // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
    const logFile = 'ProjectListManager_test_log.txt';
    fs.writeFileSync(logFile, logs.join('\n'), 'utf8');
    console.log(`üìù Log saved to ${logFile}\n`);
    

  } catch (error) {
    const errMsg = `[${now()}] ‚ùå Unexpected error: ${error.message}`;
    console.error(errMsg);
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    fs.writeFileSync('ProjectListManager_error_log.txt', errMsg, 'utf8');
  } finally {
    await new Promise(r => setTimeout(r, 2000)); // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå
    
    await browser?.close(); // ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå
  }
})();
