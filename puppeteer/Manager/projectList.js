// ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
require('dotenv').config();  // ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå .env
const puppeteer = require('puppeteer');  // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
const fs = require('fs');  // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå
const { performance } = require('perf_hooks');  // ‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏î‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
const { log } = require('console'); // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏ã‡∏•

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ‡∏ß‡∏±‡∏ô/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡∏õ‡∏µ ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á:‡∏ô‡∏≤‡∏ó‡∏µ:‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
function now() {
  const date = new Date();
  const day = String(date.getDate()).padStart(2, '0');
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const year = date.getFullYear();
  const hours = String(date.getHours()).padStart(2, '0');
  const minutes = String(date.getMinutes()).padStart(2, '0');
  const seconds = String(date.getSeconds()).padStart(2, '0');
  return `${day}/${month}/${year} ${hours}:${minutes}:${seconds}`;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏ö‡∏ö IIFE (Immediately Invoked Function Expression)
(async () => {
  // ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö browser instance ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡πá‡∏≠‡∏Å
  let browser;
  const logs = [];
  const logFilename = `SubtaskOperations_log.txt`;

  try {
    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏° protocolTimeout
    browser = await puppeteer.launch({
      headless: false,
      args: [
        '--disable-features=PasswordManagerEnabled,AutomaticPasswordSaving',
        '--disable-save-password-bubble'
      ],
      protocolTimeout: 60000  // ‡πÄ‡∏û‡∏¥‡πà‡∏° timeout ‡πÄ‡∏õ‡πá‡∏ô 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ screenshot timeout
    });

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà
    const page = await browser.newPage();

    // ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° log ‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
    page.on('console', msg => console.log(`[${now()}] PAGE LOG:`, msg.text()));

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    page.on('response', async response => {
      if (!response.ok()) {
        try {
          const body = await response.text();
          console.log(`[${now()}] ‚ùó RESPONSE ERROR (${response.status()}) ${response.url()}:\n${body}`);
        } catch (error) {
          console.log(`[${now()}] ‚ùó RESPONSE ERROR (${response.status()}) ${response.url()}: Could not get body`);
        }
      }
    });

    // ========== ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö ==========

    logs.push(`üìÖ Timestamp: ${now()}`);
    const loadStart = performance.now();
    await page.goto(process.env.APP_URL, { waitUntil: 'networkidle0' });
    const loadEnd = performance.now();
    logs.push(`üöÄ Login Page Load Time: ${(loadEnd - loadStart).toFixed(2)} ms`);

    await page.waitForSelector('#username');
    await page.waitForSelector('#password');
    await page.type('#username', process.env.LOGIN_USERNAME_MANAGER);
    await page.type('#password', process.env.LOGIN_PASSWORD_MANAGER);
    await new Promise(r => setTimeout(r, 800));

    const loginStart = performance.now();
    await Promise.all([
      page.click('button[type="submit"]'),
      page.waitForNavigation({ waitUntil: 'networkidle0' }),
    ]);
    const loginEnd = performance.now();
    logs.push(`üîê Login Time: ${(loginEnd - loginStart).toFixed(2)} ms`);

    // ========== ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå ==========

    logs.push(`üìÖ Timestamp: ${now()}`);
    const navigateToProjectsStart = performance.now();
    await page.goto(`${process.env.APP_URL}/ManagerProjectList`, { waitUntil: 'networkidle0' });
    const navigateToProjectsEnd = performance.now();
    logs.push(`üß≠ Navigation to Project List Time: ${(navigateToProjectsEnd - navigateToProjectsStart).toFixed(2)} ms`);

    await page.waitForFunction(() => {
      return !document.querySelector('.animate-spin') &&
        (document.querySelector('table tbody tr') || document.querySelector('table tbody td.text-center'));
    }, { timeout: 10000 });

    const projectExists = await page.evaluate(() => {
      const rows = document.querySelectorAll('table tbody tr');
      return rows.length > 0;
    });

    if (!projectExists) {
      logs.push('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö');
      throw new Error('No projects available to test tasks');
    }

    logs.push('‚úÖ ‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö');

    // ========== ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô (Task) ‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå ==========

    const navigateToTasksStart = performance.now();
    await Promise.all([
      page.click('table tbody tr'),
      page.waitForNavigation({ waitUntil: 'networkidle0' }),
    ]);
    const navigateToTasksEnd = performance.now();
    logs.push(`üß≠ Navigation to Task List Time: ${(navigateToTasksEnd - navigateToTasksStart).toFixed(2)} ms`);

    const isTaskListPage = await page.evaluate(() => {
      return window.location.href.includes('/ManagerTask') || window.location.href.includes('/managertasklist');
    });

    if (!isTaskListPage) {
      logs.push('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
      throw new Error('Failed to navigate to task list page');
    }

    logs.push('‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');

    // ========== ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 4: ‡∏™‡∏£‡πâ‡∏≤‡∏á Task ‡πÉ‡∏´‡∏°‡πà ==========

    logs.push(`üìÖ Timestamp: ${now()}`);
    logs.push('üß™ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Task ‡πÉ‡∏´‡∏°‡πà');
    const createTaskStart = performance.now();

    const errorMsgExists = await page.evaluate(() => {
      const errorElements = Array.from(document.querySelectorAll('div, p, span')).filter(
        el => el.textContent?.includes('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô') ||
          el.textContent?.includes('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Project')
      );
      return errorElements.length > 0;
    });

    if (errorMsgExists) {
      logs.push('‚ö†Ô∏è ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Project"');

      const projectSelected = await page.evaluate(() => {
        const projectSelectors = document.querySelectorAll('select, .project-selector, [role="combobox"]');
        if (projectSelectors.length > 0) {
          projectSelectors[0].click();
          return true;
        }
        return false;
      });

      if (projectSelected) {
        logs.push('‚úÖ ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Project ‡πÅ‡∏•‡πâ‡∏ß');
        await new Promise(r => setTimeout(r, 1000));
      }
    }

    try {
      const buttonTexts = await page.evaluate(() => {
        return Array.from(document.querySelectorAll('button')).map(btn => btn.textContent.trim());
      });
      logs.push(`üìä ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤: ${buttonTexts.join(', ')}`);

      const clickResult = await page.evaluate(() => {
        const addButton = Array.from(document.querySelectorAll('button'))
          .find(btn => btn.textContent.includes('+ Add Task'));
        if (addButton) {
          addButton.click();
          return true;
        }
        return false;
      });

      if (!clickResult) throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° + Add Task');
      logs.push('‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° + Add Task ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } catch (error) {
      logs.push(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° + Add Task: ${error.message}`);
      throw error;
    }

    await page.waitForSelector('div[role="dialog"]');
    logs.push('‚úÖ Dialog ‡πÄ‡∏õ‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß');

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Task ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    const taskName = `Test Task ${new Date().toISOString().slice(0, 10)}`;
    const description = `This is a test task created by Puppeteer on ${now()}`;
    const budget = "5000";
    const status = "pending";

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    const today = new Date();
    const startDate = today.toISOString().slice(0, 10);
    const endDate = new Date();
    endDate.setDate(today.getDate() + 7);
    const endDateStr = endDate.toISOString().slice(0, 10);

    // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡∏ö MM/DD/YYYY
    const startDateMDY = `${String(today.getMonth() + 1).padStart(2, '0')}/${String(today.getDate()).padStart(2, '0')}/${today.getFullYear()}`;
    const endDateMDY = `${String(endDate.getMonth() + 1).padStart(2, '0')}/${String(endDate.getDate()).padStart(2, '0')}/${endDate.getFullYear()}`;

    logs.push('üñäÔ∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö...');

    // 1. ‡∏Å‡∏£‡∏≠‡∏Å Task Name
    await page.type('input[placeholder="Enter Task Name"]', taskName);
    logs.push('‚úÖ 1. ‡∏Å‡∏£‡∏≠‡∏Å Task Name ‡πÅ‡∏•‡πâ‡∏ß');
    await new Promise(r => setTimeout(r, 300));

    // 2. ‡∏Å‡∏£‡∏≠‡∏Å Description
    await page.type('textarea[placeholder="Enter Task Description"]', description);
    logs.push('‚úÖ 2. ‡∏Å‡∏£‡∏≠‡∏Å Description ‡πÅ‡∏•‡πâ‡∏ß');
    await new Promise(r => setTimeout(r, 300));

    // 3. ‡∏Å‡∏£‡∏≠‡∏Å Budget
    await page.type('input[placeholder="Enter Task Budget"]', budget);
    logs.push('‚úÖ 3. ‡∏Å‡∏£‡∏≠‡∏Å Budget ‡πÅ‡∏•‡πâ‡∏ß');
    await new Promise(r => setTimeout(r, 300));

    // 4. ‡∏Å‡∏£‡∏≠‡∏Å Start Date 
    await page.click('#start-date-input').catch(() => null);
    await page.keyboard.down('Control');
    await page.keyboard.press('a');
    await page.keyboard.up('Control');
    await page.keyboard.press('Backspace');
    await page.keyboard.type(startDateMDY);
    // 5. ‡∏Å‡∏£‡∏≠‡∏Å End Date
    await page.click('#end-date-input').catch(() => null);
    await page.keyboard.down('Control');
    await page.keyboard.press('a');
    await page.keyboard.up('Control');
    await page.keyboard.press('Backspace');
    await page.keyboard.type(endDateMDY);

    try {
      await page.evaluate(() => {
        const statusSelect = document.querySelector('select[name="status"], select#status');
        if (statusSelect) {
          statusSelect.value = "Pending";
          statusSelect.dispatchEvent(new Event('change', { bubbles: true }));
        }
      });
      logs.push('‚úÖ 6. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Status ‡πÄ‡∏õ‡πá‡∏ô "Pending" ‡πÅ‡∏•‡πâ‡∏ß');
    } catch (error) {
      logs.push(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Status ‡πÑ‡∏î‡πâ: ${error.message}`);
    }

    // 6. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Project
    try {
      const projectSelectorExists = await page.evaluate(() => {
        return !!document.querySelector('select[name="project"], select#project, [aria-label*="project"], [placeholder*="project"]');
      });

      if (projectSelectorExists) {
        logs.push('üîç ‡∏û‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Project ‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Project...');

        await page.evaluate(() => {
          const projectSelect = document.querySelector('select[name="project"], select#project');
          if (projectSelect && projectSelect.options.length > 0) {
            projectSelect.selectedIndex = 1; // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            projectSelect.dispatchEvent(new Event('change', { bubbles: true }));
          }
        });

        logs.push('‚úÖ 7. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Project ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
      }
    } catch (error) {
      logs.push(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Project ‡πÑ‡∏î‡πâ: ${error.message}`);
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
    const formValues = await page.evaluate(() => {
      return {
        taskName: document.querySelector('input[placeholder="Enter Task Name"]')?.value,
        description: document.querySelector('textarea[placeholder="Enter Task Description"]')?.value,
        budget: document.querySelector('input[placeholder="Enter Task Budget"]')?.value,
        startDate: document.querySelectorAll('input[type="date"]')[0]?.value,
        endDate: document.querySelectorAll('input[type="date"]')[1]?.value
      };
    });

    logs.push(`üìù ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°: ${JSON.stringify(formValues)}`);

    // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    const saveTaskStart = performance.now();
    await new Promise(r => setTimeout(r, 1000));

    // 7. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Task
    try {
      // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Save
      const buttonFound = await page.evaluate(() => {
        const saveButtons = [
          ...Array.from(document.querySelectorAll('button')).filter(btn =>
            btn.textContent.trim() === 'Save' ||
            btn.textContent.trim().includes('Save')),
          ...Array.from(document.querySelectorAll('button[type="submit"]')),
          ...Array.from(document.querySelectorAll('div[role="dialog"] button')).filter(btn =>
            !btn.textContent.trim().includes('Cancel'))
        ];

        console.log("‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏∏‡πà‡∏° Save:", saveButtons.length, "‡∏õ‡∏∏‡πà‡∏°");

        if (saveButtons.length > 0) {
          const buttonText = saveButtons[0].textContent.trim();
          console.log("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°:", buttonText);
          saveButtons[0].click();
          return buttonText;
        }
        return null;
      });

      if (buttonFound) {
        logs.push(`‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° "${buttonFound}" ‡πÅ‡∏•‡πâ‡∏ß`);
      } else {
        logs.push('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏° Save ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠');
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏° Save');
      }
    } catch (error) {
      logs.push(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Save: ${error.message}`);
    }

    const saveTaskEnd = performance.now();
    logs.push(`‚è±Ô∏è ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Task ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤: ${(saveTaskEnd - saveTaskStart).toFixed(2)} ms`);

    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await new Promise(r => setTimeout(r, 1000));

    // 8. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå 
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Task ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const taskCreated = await page.evaluate((taskNameToFind) => {
      const taskElements = Array.from(document.querySelectorAll('table tbody tr'));
      return taskElements.some(row => row.textContent?.includes(taskNameToFind));
    }, taskName);

    if (taskCreated) {
      logs.push('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Task ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
    } else {
      logs.push('‚ùì ‡∏™‡∏£‡πâ‡∏≤‡∏á Task ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤)');
    }
    const createTaskEnd = performance.now();
    logs.push(`‚è±Ô∏è Create Task Time: ${(createTaskEnd - createTaskStart).toFixed(2)} ms`);
    logs.push(`üìÖ Timestamp: ${now()}`);
    // ====================================================================================================

    // ========== ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 5, 6, 7, 8: ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Subtask (‡∏™‡∏£‡πâ‡∏≤‡∏á, ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç, ‡∏•‡∏ö) ==========
    try {
      let subtaskName; // Use to store the subtask name for later steps

      // ========== Step 5: Test Clicking the + Add Subtask Button ==========
      logs.push(`üìÖ Timestamp: ${now()}`);
      logs.push('üß™ Starting test: Click + Add Subtask button');
      const addSubtaskStart = performance.now();

      const taskRowFoundAndClicked = await page.evaluate((name) => {
        const rows = Array.from(document.querySelectorAll('table tbody tr'));
        const targetRow = rows.find(row => row.textContent?.includes(name));
        if (targetRow) {
          targetRow.click(); // Select the parent task row
          return true;
        }
        return false;
      }, taskName);

      if (!taskRowFoundAndClicked) throw new Error(`Could not find the row for task: "${taskName}"`);
      logs.push('‚úÖ Clicked on the created task row.');
      await new Promise(r => setTimeout(r, 1000)); // Wait for UI to respond

      const addButtonClicked = await page.evaluate(() => {
        const button = Array.from(document.querySelectorAll('button')).find(btn => btn.textContent?.includes('+ Subtask Add'));
        if (button) {
          button.click();
          return true;
        }
        return false;
      });

      if (!addButtonClicked) throw new Error('Could not find or click the "+ Subtask Add" button.');
      logs.push('‚úÖ Successfully clicked the "+ Subtask Add" button.');
      const addSubtaskEnd = performance.now();
      logs.push(`‚è±Ô∏è Add Subtask Button Time: ${(addSubtaskEnd - addSubtaskStart).toFixed(2)} ms`);

      // ========== Step 6: Create a New Subtask ==========
      const fillSubtaskStart = performance.now();
      logs.push('üß™ Starting test: Create a new subtask');
      
      await page.waitForSelector('div[role="dialog"]', { timeout: 5000 });
      logs.push('‚úÖ Subtask dialog opened.');

      subtaskName = `Test Subtask ${new Date().toISOString().slice(0, 10)}`;
      
      logs.push('üñäÔ∏è Filling out subtask form...');
      await page.type('input[placeholder*="Subtask Name"]', subtaskName);
      await page.type('textarea[placeholder*="Description"]', `Test description - ${now()}`);
      await page.type('input[placeholder*="Budget"]', "1200");
      
      const today = new Date();
      const startDateMDY = `${String(today.getMonth() + 1).padStart(2, '0')}/${String(today.getDate()).padStart(2, '0')}/${today.getFullYear()}`;
      await page.type('#add-subtask-start-date', startDateMDY);
      
      const endDate = new Date();
      endDate.setDate(today.getDate() + 5);
      const endDateMDY = `${String(endDate.getMonth() + 1).padStart(2, '0')}/${String(endDate.getDate()).padStart(2, '0')}/${endDate.getFullYear()}`;
      await page.type('#add-subtask-end-date', endDateMDY);

      await page.click('div[role="dialog"] #status-select');
      await page.waitForSelector('div[role="listbox"]');
      await page.click('div[role="listbox"] div[data-value="inprogress"]');

      await page.type('input[type="number"][placeholder*="Progress"]', "10");
      logs.push('‚úÖ Form filled.');

      await page.click('div[role="dialog"] button[type="submit"]');
      logs.push('‚úÖ Clicked the confirm button to add subtask.');

      await page.waitForFunction(() => !document.querySelector('div[role="dialog"]'), { timeout: 5000 });
      logs.push('‚úÖ Dialog closed, subtask created successfully.');
      
      const fillSubtaskEnd = performance.now();
      logs.push(`‚è±Ô∏è Fill Subtask Form Time: ${(fillSubtaskEnd - fillSubtaskStart).toFixed(2)} ms`);

      // ========== Step 7: Edit the Subtask ==========
      const editSubtaskStart = performance.now();
      logs.push('üß™ Starting test: Edit the subtask');
      const editedSubtaskName = `Edited Subtask - ${new Date().toISOString().slice(0, 10)}`;

      const editButtonClicked = await page.evaluate((name) => {
        const rows = Array.from(document.querySelectorAll('tr'));
        const targetRow = rows.find(row => row.textContent.includes(name));
        if (targetRow) {
          const button = targetRow.querySelector('button#subtaskEdit');
          if (button) {
            button.click();
            return true;
          }
        }
        return false;
      }, subtaskName);

      if (!editButtonClicked) throw new Error(`Could not find edit button for subtask: "${subtaskName}"`);
      logs.push('‚úÖ Clicked the edit subtask button.');
      
      await page.waitForSelector('div[role="dialog"]', { timeout: 5000 });
      await page.click('input[placeholder*="Subtask Name"]', { clickCount: 3 });
      await page.type('input[placeholder*="Subtask Name"]', editedSubtaskName);
      await page.click('div[role="dialog"] button[type="submit"]');
      await page.waitForFunction(() => !document.querySelector('div[role="dialog"]'), { timeout: 5000 });
      logs.push('‚úÖ Subtask edited successfully.');
      subtaskName = editedSubtaskName; // Update name for the delete step
      const editSubtaskEnd = performance.now();
      logs.push(`‚è±Ô∏è Edit Subtask Time: ${(editSubtaskEnd - editSubtaskStart).toFixed(2)} ms`);

      // ========== Step 8: Delete the Subtask ==========
      const deleteSubtaskStart = performance.now();
      logs.push('üß™ Starting test: Delete the subtask');

      const deleteButtonClicked = await page.evaluate((name) => {
        const rows = Array.from(document.querySelectorAll('tr'));
        const targetRow = rows.find(row => row.textContent.includes(name));
        if (targetRow) {
          const button = targetRow.querySelector('button#subtaskDelete');
          if (button) {
            button.click();
            return true;
          }
        }
        return false;
      }, subtaskName);

      if (!deleteButtonClicked) throw new Error(`Could not find delete button for subtask: "${subtaskName}"`);
      logs.push('‚úÖ Clicked the delete subtask button.');

      await page.waitForSelector('div[role="dialog"]', { timeout: 5000 });
      await page.click('div[role="dialog"] button[color="red"]'); // Click the red confirm button
      await page.waitForFunction(() => !document.querySelector('div[role="dialog"]'), { timeout: 5000 });
      logs.push('‚úÖ Subtask deleted successfully.');
      const deleteSubtaskEnd = performance.now();
      logs.push(`‚è±Ô∏è Delete Subtask Time: ${(deleteSubtaskEnd - deleteSubtaskStart).toFixed(2)} ms`);

    } catch (error) {
        logs.push(`‚ùå Error during subtask testing: ${error.message}`);
        const isDialogOpen = await page.evaluate(() => !!document.querySelector('div[role="dialog"]'));
        if (isDialogOpen) {
            const dialogError = await page.evaluate(() => {
                const errorEl = document.querySelector('div[role="dialog"] [color="red"], .error-message');
                return errorEl ? errorEl.textContent : 'No specific error message found in dialog.';
            });
            logs.push(`‚ö†Ô∏è Dialog was still open. Reason: ${dialogError}`);
        }
    }
    
    // ========== ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 9: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏∏‡πà‡∏° Edit ‡∏Ç‡∏≠‡∏á Task ==========
          logs.push(`üìÖ Timestamp: ${now()}`);
          logs.push('üß™ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Task');
          const editTaskStart = performance.now();

          // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Edit ‡∏Ç‡∏≠‡∏á Task
          try {
            const editTaskButtonClicked = await page.evaluate((taskName) => {
              // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ Task ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
              const taskRows = Array.from(document.querySelectorAll('table tbody tr'));
              console.log(`‡∏û‡∏ö‡πÅ‡∏ñ‡∏ß Task ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${taskRows.length} ‡πÅ‡∏ñ‡∏ß`);

              for (const row of taskRows) {
                if (row.textContent.includes(taskName)) {
                  console.log(`‡∏û‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ Task "${taskName}"`);

                  // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏õ‡∏∏‡πà‡∏° Edit ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ ID ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å
                  let editButton = row.querySelector('#task-edit');

                  // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏î‡πâ‡∏ß‡∏¢ ID ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ properties ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
                  if (!editButton) {
                    editButton = row.querySelector('button[color="orange"], button.cursor-pointer[variant="soft"][color="orange"]');
                  }

                  // ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏õ‡∏∏‡πà‡∏°
                  if (!editButton) {
                    const buttons = Array.from(row.querySelectorAll('button'));
                    editButton = buttons.find(btn => btn.textContent.trim().includes('Edit'));
                  }

                  if (editButton) {
                    console.log('‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏° Edit ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Task');
                    editButton.click();
                    return true;
                  } else {
                    // Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ô‡∏µ‡πâ
                    const allButtons = Array.from(row.querySelectorAll('button'));
                    console.log(`‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${allButtons.length} ‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ô‡∏µ‡πâ`);
                    allButtons.forEach((btn, idx) => {
                      console.log(`‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà ${idx + 1}:`, {
                        text: btn.textContent.trim(),
                        id: btn.id,
                        class: btn.className,
                        color: btn.getAttribute('color')
                      });
                    });
                    return false;
                  }
                }
              }
              console.log(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏ñ‡∏ß‡∏Ç‡∏≠‡∏á Task "${taskName}" ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç`);
              return false;
            }, taskName);

            if (editTaskButtonClicked) {
              logs.push('‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Edit Task ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

              // ‡∏£‡∏≠‡πÉ‡∏´‡πâ Dialog ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏£‡∏≤‡∏Å‡∏è
              try {
                await page.waitForSelector('div[role="dialog"]', { timeout: 5000 });
                logs.push('‚úÖ Dialog ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Task ‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡πÅ‡∏•‡πâ‡∏ß');

                // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
                await new Promise(r => setTimeout(r, 1500));

                logs.push('üñäÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Task...');

                // 1. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠ Task
                const editedTaskName = `Edited Task - ${new Date().toISOString().slice(0, 10)}`;
                const nameInput = await page.$('input[value="' + taskName + '"]');
                if (nameInput) {
                  await nameInput.click({ clickCount: 3 });
                  await nameInput.press('Backspace');
                  await nameInput.type(editedTaskName);
                  logs.push('‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠ Task ‡πÄ‡∏õ‡πá‡∏ô: ' + editedTaskName);
                } else {
                  logs.push('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠ Task ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á - ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∑‡πà‡∏ô');

                  // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ input ‡πÅ‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô‡πÜ
                  const inputs = await page.$$('input');
                  if (inputs.length > 0) {
                    await inputs[0].click({ clickCount: 3 });
                    await inputs[0].press('Backspace');
                    await inputs[0].type(editedTaskName);
                    logs.push('‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠ Task ‡πÄ‡∏õ‡πá‡∏ô: ' + editedTaskName + ' (‡πÉ‡∏ä‡πâ input ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏û‡∏ö)');
                  }
                }

                // 2. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Description
                const newTaskDescription = `Description edited by automation test on ${new Date().toISOString()}`;
                const descInput = await page.$('div[role="dialog"] input:nth-child(2)');
                if (descInput) {
                  await descInput.click({ clickCount: 3 });
                  await descInput.press('Backspace');
                  await descInput.type(newTaskDescription);
                  logs.push('‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Description ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
                }

                // 3. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Budget
                const newTaskBudget = "7500";
                try {
                  // ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ JS ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤
                  const budgetUpdated = await page.evaluate((value) => {
                    // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å label ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ Budget
                    const labels = Array.from(document.querySelectorAll('label'));
                    for (const label of labels) {
                      if (label.textContent.includes('Budget')) {
                        const input = label.querySelector('input');
                        if (input) {
                          input.value = value;
                          input.dispatchEvent(new Event('input', { bubbles: true }));
                          input.dispatchEvent(new Event('change', { bubbles: true }));
                          console.log('‡∏û‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Budget ‡∏à‡∏≤‡∏Å label');
                          return true;
                        }
                      }
                    }
                    return false;
                  }, newTaskBudget);

                  if (budgetUpdated) {
                    logs.push('‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Budget ‡πÄ‡∏õ‡πá‡∏ô: ' + newTaskBudget + ' (‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ JS ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á)');
                  } else {
                    logs.push('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å Budget');
                  }
                } catch (error) {
                  logs.push('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Budget ‡πÑ‡∏î‡πâ: ' + error.message);
                }

                // 4. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç End Date (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏µ‡∏Å 10 ‡∏ß‡∏±‡∏ô)
                try {
                  // ‡∏´‡∏≤ input ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô type="date" ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á (End Date)
                  const dateInputs = await page.$$('input[type="date"]');
                  if (dateInputs.length >= 2) {
                    const endDateInput = dateInputs[1];

                    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà (‡πÄ‡∏û‡∏¥‡πà‡∏° 10 ‡∏ß‡∏±‡∏ô)
                    const today = new Date();
                    const newEndDate = new Date();
                    newEndDate.setDate(today.getDate() + 10);
                    const newEndDateStr = newEndDate.toISOString().split('T')[0]; // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö YYYY-MM-DD

                    await endDateInput.click({ clickCount: 3 });
                    await endDateInput.press('Backspace');
                    await endDateInput.type(newEndDateStr);
                    logs.push('‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç End Date ‡πÄ‡∏õ‡πá‡∏ô: ' + newEndDateStr);
                  }
                } catch (error) {
                  logs.push(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç End Date: ${error.message}`);
                }

                // 5. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Status ‡πÄ‡∏õ‡πá‡∏ô "In Progress"
                try {
                  // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà dropdown Status
                  const statusClick = await page.evaluate(() => {
                    const statusLabels = Array.from(document.querySelectorAll('div[role="dialog"] label'))
                      .filter(label => label.textContent.includes('Status'));

                    if (statusLabels.length > 0) {
                      const selectElement = statusLabels[0].querySelector('button[data-radix-select-trigger], select');
                      if (selectElement) {
                        selectElement.click();
                        return true;
                      }
                    }
                    return false;
                  });

                  if (statusClick) {
                    logs.push('‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å dropdown Status');

                    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ dropdown ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                    await new Promise(r => setTimeout(r, 500));

                    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "In Progress"
                    const statusSelected = await page.evaluate(() => {
                      const options = document.querySelectorAll('[role="option"], [data-radix-select-value], .option-item');
                      for (const option of options) {
                        if (option.textContent.toLowerCase().includes('in progress')) {
                          option.click();
                          return true;
                        }
                      }
                      return false;
                    });

                    if (statusSelected) {
                      logs.push('‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Status ‡πÄ‡∏õ‡πá‡∏ô "In Progress"');
                    }
                  }
                } catch (error) {
                  logs.push(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Status: ${error.message}`);
                }

                // 6. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Progress ‡πÄ‡∏õ‡πá‡∏ô 60%
                const progressInput = await page.$('input[type="number"]');
                if (progressInput) {
                  await progressInput.click({ clickCount: 3 });
                  await progressInput.press('Backspace');
                  await progressInput.type('60');
                  logs.push('‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Progress ‡πÄ‡∏õ‡πá‡∏ô 60%');
                }

                // 7. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Update
                const updateClicked = await page.evaluate(() => {
                  const updateButtons = Array.from(document.querySelectorAll('div[role="dialog"] button'))
                    .filter(btn =>
                      btn.textContent.includes('Update') ||
                      (btn.textContent.includes('Save') && !btn.textContent.includes('Cancel'))
                    );

                  if (updateButtons.length > 0) {
                    updateButtons[0].click();
                    return true;
                  }
                  return false;
                });

                if (updateClicked) {
                  logs.push('‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Update Task ‡πÅ‡∏•‡πâ‡∏ß');

                  // ‡∏£‡∏≠‡πÉ‡∏´‡πâ Dialog ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï
                  await new Promise(r => setTimeout(r, 2000));

                  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Dialog ‡∏õ‡∏¥‡∏î‡∏•‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                  const dialogClosed = await page.evaluate(() => {
                    return !document.querySelector('div[role="dialog"]');
                  });

                  if (dialogClosed) {
                    logs.push('‚úÖ Dialog ‡∏õ‡∏¥‡∏î‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß - ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Task ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

                    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤ UI ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï
                    await new Promise(r => setTimeout(r, 1500));

                    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Task ‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                    const taskUpdated = await page.evaluate((newTaskName) => {
                      const rows = Array.from(document.querySelectorAll('table tbody tr'));
                      return rows.some(row => row.textContent.includes(newTaskName));
                    }, editedTaskName);

                    if (taskUpdated) {
                      logs.push('‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Task ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
                      logs.push('üéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Task ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
                    } else {
                      logs.push('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Task ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ - ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ');
                    }
                    const editTaskEnd = performance.now();
                    logs.push(`‚è±Ô∏è Edit Task Time: ${(editTaskEnd - editTaskStart).toFixed(2)} ms`);

                  } else {
                    logs.push('‚ùå Dialog ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Update - ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å');

                    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
                    const errorMsg = await page.evaluate(() => {
                      const errorElement = document.querySelector('div[role="dialog"] [color="red"], .error-message');
                      return errorElement ? errorElement.textContent : null;
                    });

                    if (errorMsg) {
                      logs.push(`‚ùå ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${errorMsg}`);
                    }
                  }
                } else {
                  logs.push('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏° Update Task');
                }
              } catch (error) {
                logs.push(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Task: ${error.message}`);
              }
            } else {
              logs.push('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Edit Task');
            }
          } catch (error) {
            logs.push(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Task: ${error.message}`);
          }

          // ========== ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 10: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏∏‡πà‡∏° Delete ‡∏Ç‡∏≠‡∏á Task ==========
          logs.push(`üìÖ Timestamp: ${now()}`);
          logs.push('üß™ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏ö Task');
          const deleteTaskStart = performance.now();

          try {
            // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Task ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (Edited Task)
            const editedTaskName = `Edited Task - ${new Date().toISOString().slice(0, 10)}`;

            // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Delete ‡∏Ç‡∏≠‡∏á Task
            const deleteTaskButtonClicked = await page.evaluate((taskName) => {
              // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ Task ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
              const taskRows = Array.from(document.querySelectorAll('table tbody tr'));
              console.log(`‡∏û‡∏ö‡πÅ‡∏ñ‡∏ß Task ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${taskRows.length} ‡πÅ‡∏ñ‡∏ß ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏ö`);

              for (const row of taskRows) {
                if (row.textContent.includes(taskName)) {
                  console.log(`‡∏û‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ Task "${taskName}" ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏ö`);

                  // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏õ‡∏∏‡πà‡∏° Delete ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ ID ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å (‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)
                  let deleteButton = row.querySelector('#delete-task, button[id*="delete"]');

                  // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏î‡πâ‡∏ß‡∏¢ ID ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ properties ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
                  if (!deleteButton) {
                    deleteButton = row.querySelector('button[color="red"], button.cursor-pointer[variant="soft"][color="red"]');
                  }

                  // ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏õ‡∏∏‡πà‡∏°
                  if (!deleteButton) {
                    const buttons = Array.from(row.querySelectorAll('button'));
                    deleteButton = buttons.find(btn =>
                      btn.textContent.trim().includes('Delete') ||
                      btn.classList.contains('delete-btn')
                    );
                  }

                  if (deleteButton) {
                    console.log('‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏° Delete ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Task');
                    deleteButton.click();
                    return true;
                  }
                }
              }
              return false;
            }, editedTaskName);

            if (deleteTaskButtonClicked) {
              logs.push('‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Delete Task ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

              // ‡∏£‡∏≠‡πÉ‡∏´‡πâ Dialog ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏õ‡∏£‡∏≤‡∏Å‡∏è
              await page.waitForSelector('div[role="dialog"]', { timeout: 5000 });
              logs.push('‚úÖ Dialog ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö Task ‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡πÅ‡∏•‡πâ‡∏ß');

              // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÉ‡∏´‡πâ Dialog ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
              await new Promise(r => setTimeout(r, 800));

              // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Delete ‡πÉ‡∏ô‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
              const confirmButtonClicked = await page.evaluate(() => {
                // ‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏õ‡∏∏‡πà‡∏° Delete ‡∏î‡πâ‡∏ß‡∏¢ ID ‡∏Å‡πà‡∏≠‡∏ô (‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)
                let deleteButton = document.querySelector('#delete-task');

                if (!deleteButton) {
                  // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÅ‡∏î‡∏á‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Delete
                  const buttons = Array.from(document.querySelectorAll('div[role="dialog"] button'))
                    .filter(btn =>
                      (btn.textContent.includes('Delete') || btn.textContent.includes('‡∏•‡∏ö')) &&
                      (btn.getAttribute('color') === 'red' || btn.className.includes('red'))
                    );

                  if (buttons.length > 0) {
                    deleteButton = buttons[0];
                  }
                }

                if (deleteButton) {
                  deleteButton.click();
                  return true;
                }
                return false;
              });

              if (confirmButtonClicked) {
                logs.push('‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö Task ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

                // ‡∏£‡∏≠‡πÉ‡∏´‡πâ Dialog ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏ö
                await new Promise(r => setTimeout(r, 2000));

                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Dialog ‡∏õ‡∏¥‡∏î‡∏•‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                const dialogClosed = await page.evaluate(() => {
                  return !document.querySelector('div[role="dialog"]');
                });

                if (dialogClosed) {
                  logs.push('‚úÖ Dialog ‡∏õ‡∏¥‡∏î‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß');

                  // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤ UI ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï
                  await new Promise(r => setTimeout(r, 1000));

                  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Task ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                  const taskDeleted = await page.evaluate((deletedTaskName) => {
                    const rows = Array.from(document.querySelectorAll('table tbody tr'));
                    return !rows.some(row => row.textContent.includes(deletedTaskName));
                  }, editedTaskName);

                  if (taskDeleted) {
                    logs.push('‚úÖ Task ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
                    logs.push('üéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏ö Task ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
                  } else {
                    logs.push('‚ùå Task ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏°‡πâ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß');
                  }
                  const deleteTaskEnd = performance.now();
                  logs.push(`‚è±Ô∏è Delete Task Time: ${(deleteTaskEnd - deleteTaskStart).toFixed(2)} ms`);

                } else {
                  logs.push('‚ùå Dialog ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Delete - ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö');
                }
              } else {
                logs.push('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö Task ‡πÉ‡∏ô Dialog');
              }
            } else {
              logs.push('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Delete Task');
            }
          } catch (error) {
            logs.push(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö Task: ${error.message}`);
          }

          logs.push('üèÅ ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Task Management');

        }
      }
    } catch (error) {
      const errMsg = `[${now()}] ‚ùå Fatal error: ${error.message}`;
      console.error(errMsg);
      logs.push(errMsg);
    }

    // ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    logs.push(`\n======== ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö ========`);
    logs.push(`üìÖ ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î: ${now()}`);

    const summaryLogs = ['\nüîç ‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô:'];
    const timingRegex = /([A-Za-z\s]+ Time): ([\d.]+) ms$/;
    const timings = {};

    // 1. ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å logs ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    logs.forEach(log => {
      const match = log.match(timingRegex);
      if (match) {
        const key = match[1].trim();
        const time = parseFloat(match[2]);
        // ‡∏£‡∏ß‡∏°‡πÄ‡∏ß‡∏•‡∏≤ Login
        if (key === 'Login Page Load Time' || key === 'Login Time') {
          timings['Login Process Time'] = (timings['Login Process Time'] || 0) + time;
        } else {
          timings[key] = time;
        }
      }
    });

    // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    const addTimingToSummary = (step, key, label) => {
      if (timings[key]) {
        summaryLogs.push(`‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà ${step}: ${label} - ${timings[key].toFixed(0)} ms`);
      }
    };

    addTimingToSummary(1, 'Login Process Time', '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö');
    addTimingToSummary(2, 'Navigation to Project List Time', '‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå');
    addTimingToSummary(3, 'Navigation to Task List Time', '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô (Task) ‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå');
    addTimingToSummary(4, 'Create Task Time', '‡∏™‡∏£‡πâ‡∏≤‡∏á Task ‡πÉ‡∏´‡∏°‡πà');
    addTimingToSummary(5, 'Add Subtask Button Time', '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° + Add ‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå');
    addTimingToSummary(6, 'Fill Subtask Form Time', '‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Subtask ‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°');
    addTimingToSummary(7, 'Edit Subtask Time', '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏∏‡πà‡∏° Edit ‡∏Ç‡∏≠‡∏á Subtask');
    addTimingToSummary(8, 'Delete Subtask Time', '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏∏‡πà‡∏° Delete ‡∏Ç‡∏≠‡∏á Subtask');
    addTimingToSummary(9, 'Edit Task Time', '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏∏‡πà‡∏° Edit ‡∏Ç‡∏≠‡∏á Task');
    addTimingToSummary(10, 'Delete Task Time', '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏∏‡πà‡∏° Delete ‡∏Ç‡∏≠‡∏á Task');

    // 3. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏Ç‡πâ‡∏≤ logs ‡∏´‡∏•‡∏±‡∏Å
    if (summaryLogs.length > 1) {
      logs.push(...summaryLogs);
    }

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡πá‡∏≠‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏ã‡∏•
    fs.writeFileSync(logFilename, logs.join('\n'), 'utf8');
    console.log(`\nüìù Log saved to ${logFilename}`);
    console.log(logs.join('\n'));

  } catch (error) {
    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ô‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
    const errMsg = `[${now()}] ‚ùå Fatal error: ${error.message}`;
    console.error(errMsg);
    if (logs.length > 0) {
      logs.push(errMsg);
      fs.writeFileSync(logFilename, logs.join('\n'), 'utf8');
    }
  } finally {
    // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå
    await new Promise(r => setTimeout(r, 2000));
    if (browser) await browser.close();
  }
})();