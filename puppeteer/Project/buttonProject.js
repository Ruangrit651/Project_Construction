require('dotenv').config();
const puppeteer = require('puppeteer');
const fs = require('fs');

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ISO string
function now() {
  return new Date().toISOString();
}

// ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå log (‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á)
const logFilename = 'Project_navigation_log.txt';

(async () => {
  const log = [];
  let browser;

  try {
    // ‡πÄ‡∏õ‡∏¥‡∏î browser ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ã‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
    browser = await puppeteer.launch({
      headless: false,
      args: [
        '--disable-features=PasswordManagerEnabled,AutomaticPasswordSaving',
        '--disable-save-password-bubble'
      ]
    });

    const page = await browser.newPage();

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
    const startLoad = Date.now();
    await page.goto(process.env.APP_URL, { waitUntil: 'networkidle0' });
    const pageLoadTime = Date.now() - startLoad;
    log.push(`üìÖ Timestamp: ${now()}`);
    log.push(`üöÄ Page Load Time: ${pageLoadTime} ms`);

    // ‡∏Å‡∏£‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏° login
    const startLogin = Date.now();
    await page.type('#username', process.env.LOGIN_USERNAME);
    await page.type('#password', process.env.LOGIN_PASSWORD);
    await page.click('button[type="submit"]');
    await page.waitForNavigation({ waitUntil: 'networkidle0' });
    const loginTime = Date.now() - startLogin;
    log.push(`üîê Login Time: ${loginTime} ms`);
    log.push(`‚úÖ Login success: ${page.url()}`);

    // =================== ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏ó‡πá‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Project ===================
    
    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ Member
    log.push(`üîç Current URL before clicking Project tab: ${page.url()}`);
    if (page.url().includes('/admin') && !page.url().includes('/adminproject')) {
      log.push('‚úÖ Currently on Member page as expected');
    } else {
      log.push('‚ö†Ô∏è Not on expected Member page');
    }

    // 2. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πá‡∏ö Project - ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö Radix UI
    log.push('üîÑ Attempting to click on Project tab...');
    const startProjectTabClick = Date.now();
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏î‡∏µ‡∏ö‡∏±‡∏Å
    await page.screenshot({ path: 'before_click.png' });
    log.push('üì∏ Screenshot before click saved');
    
    // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡πÉ‡∏ä‡πâ wait for selector ‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡∏Å‡∏±‡∏ö Radix Tabs ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏•‡∏¥‡∏Å‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    try {
      // ‡∏´‡∏≤ Project tab ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ text content
      await page.waitForFunction(() => {
        const tabs = Array.from(document.querySelectorAll('[role="tab"]'));
        return tabs.some(tab => tab.textContent.includes('Project'));
      }, { timeout: 5000 });
      
      // ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏î‡πâ‡∏ß‡∏¢ puppeteer (‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô evaluate)
      await page.$$eval('[role="tab"]', tabs => {
        const projectTab = tabs.find(tab => tab.textContent.includes('Project'));
        if (projectTab) {
          // ‡πÉ‡∏´‡πâ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏î‡πâ‡∏ß‡∏¢ native event ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏£‡∏¥‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå React event ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
          projectTab.click();
          return true;
        }
        return false;
      });
      
      log.push('‚úÖ Clicked Project tab using direct selection');
    } catch (e) {
      log.push(`‚ö†Ô∏è Direct click failed: ${e.message}`);
    }
    
    // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    await page.waitForTimeout(2000);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö URL ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏•‡∏¥‡∏Å
    if (page.url().includes('/adminproject')) {
      log.push('‚úÖ URL changed to /adminproject after click');
    } else {
      log.push('‚ö†Ô∏è URL did not change, trying alternative methods...');
      
      // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡πÉ‡∏ä‡πâ page.$eval ‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡πÄ‡∏•‡∏Å‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
      try {
        // ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà 1 - ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ï‡∏£‡∏á‡πÜ
        await page.$eval('button:nth-child(2)[role="tab"]', btn => btn.click());
        log.push('‚úÖ Tried clicking second tab button');
        
        // ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á
        await page.waitForTimeout(1000);
        
        // ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà 2 - ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ XPath
        if (!page.url().includes('/adminproject')) {
          const [projectTabElement] = await page.$x("//button[contains(text(), 'Project')]");
          if (projectTabElement) {
            await projectTabElement.click();
            log.push('‚úÖ Clicked Project tab using XPath');
          }
          
          // ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á
          await page.waitForTimeout(1000);
        }
      } catch (e) {
        log.push(`‚ö†Ô∏è Alternative click failed: ${e.message}`);
      }
    }
    
    // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 3: ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï React app ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (fallback)
    if (!page.url().includes('/adminproject')) {
      log.push('üîÑ Using direct navigation to /adminproject as fallback');
      await page.goto(`${process.env.APP_URL}/adminproject`, { waitUntil: 'networkidle0' });
    }
    
    const projectTabClickTime = Date.now() - startProjectTabClick;
    log.push(`‚è±Ô∏è Project Tab Click Time: ${projectTabClickTime} ms`);
    
    // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ Project
    log.push(`üîç Current URL after attempts: ${page.url()}`);
    if (page.url().includes('/adminproject')) {
      log.push('‚úÖ Successfully navigated to Project page');
    } else {
      log.push('‚ö†Ô∏è Failed to navigate to Project page');
    }
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏•‡∏¥‡∏Å
    await page.screenshot({ path: 'after_click.png' });
    log.push('üì∏ Screenshot after click saved');
    
    // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤ Project
    const projectPageContent = await page.evaluate(() => {
      // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤
      const title = document.querySelector('h1, h2, h3')?.textContent || 'No title found';
      const hasTable = !!document.querySelector('table');
      const buttonTexts = Array.from(document.querySelectorAll('button'))
        .map(btn => btn.textContent.trim())
        .filter(text => text.length > 0);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏õ‡∏∏‡πà‡∏° Project ‡πÄ‡∏õ‡πá‡∏ô active
      const tabs = Array.from(document.querySelectorAll('[role="tab"]'));
      const projectTab = tabs.find(tab => tab.textContent.includes('Project'));
      
      const projectTabActive = projectTab && (
        projectTab.getAttribute('aria-selected') === 'true' ||
        projectTab.classList.contains('active') ||
        window.getComputedStyle(projectTab).borderBottomColor.includes('rgb(59, 130, 246)') ||
        projectTab.querySelector('.text-blue-400')
      );
      
      return {
        title,
        hasTable,
        buttonTexts,
        projectTabActive,
        url: window.location.href
      };
    });
    
    log.push('üìÑ Project Page Content:');
    log.push(`  Current URL in browser: ${projectPageContent.url}`);
    log.push(`  Title: ${projectPageContent.title}`);
    log.push(`  Has Table: ${projectPageContent.hasTable ? 'Yes' : 'No'}`);
    log.push(`  Buttons: ${projectPageContent.buttonTexts.join(', ')}`);
    log.push(`  Project Tab Active: ${projectPageContent.projectTabActive ? 'Yes' : 'No'}`);
    
    // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ö‡∏ö‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö
    fs.writeFileSync(logFilename, log.join('\n'), 'utf8');
    console.log('\nüìù Log saved to', logFilename);
    console.log(log.join('\n'));

  } catch (err) {
    const errorLog = `[${now()}] ‚ùå Unexpected error: ${err.message}`;
    console.error(errorLog);
    log.push(errorLog);
    fs.writeFileSync(logFilename, log.join('\n'), 'utf8');
  } finally {
    await browser?.close();
  }
})();