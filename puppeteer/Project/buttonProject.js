require('dotenv').config(); // ‡πÇ‡∏´‡∏•‡∏î environment variables ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå .env
const puppeteer = require('puppeteer'); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Puppeteer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå
const fs = require('fs'); // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ timestamp ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ‡∏ß‡∏±‡∏ô/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡∏õ‡∏µ ‡πÄ‡∏ß‡∏•‡∏≤:‡∏ô‡∏≤‡∏ó‡∏µ:‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
function now() {
  const d = new Date();
  const day = String(d.getDate()).padStart(2, '0');
  const month = String(d.getMonth() + 1).padStart(2, '0');
  const year = d.getFullYear();
  const hour = String(d.getHours()).padStart(2, '0');
  const min = String(d.getMinutes()).padStart(2, '0');
  const sec = String(d.getSeconds()).padStart(2, '0');
  return `${day}/${month}/${year} ${hour}:${min}:${sec}`;
}

const logFilename = 'Project_Button_log.txt'; // ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå log

(async () => {
  const log = [];
  let browser;

  try {
    // ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå (‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô headless ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô)
    browser = await puppeteer.launch({
      headless: false,
      args: [
        '--disable-features=PasswordManagerEnabled,AutomaticPasswordSaving',
        '--disable-save-password-bubble'
      ]
    });

    const page = await browser.newPage(); // ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà

    // ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
    const startLoad = Date.now();
    await page.goto(process.env.APP_URL, { waitUntil: 'networkidle0' });
    const pageLoadTime = Date.now() - startLoad;
    log.push(`üìÖ Timestamp: ${now()}`);
    log.push(`üöÄ Page Load Time: ${pageLoadTime} ms`);

    // ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• login
    const startLogin = Date.now();
    await page.type('#username', process.env.LOGIN_USERNAME); // ‡∏Å‡∏£‡∏≠‡∏Å username
    await page.type('#password', process.env.LOGIN_PASSWORD); // ‡∏Å‡∏£‡∏≠‡∏Å password
    await page.click('button[type="submit"]'); // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
    await page.waitForNavigation({ waitUntil: 'networkidle0' }); // ‡∏£‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à
    const loginTime = Date.now() - startLogin;
    log.push(`üìÖ Timestamp: ${now()}`);
    log.push(`üîê Login Time: ${loginTime} ms`);
    log.push(`‚úÖ Login success: ${page.url()}`);

    // ----------------- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡∏•‡∏¥‡∏Å‡πÅ‡∏ó‡πá‡∏ö Project ------------------

    log.push(`üìÖ Timestamp: ${now()}`);
    log.push(`üîç Current URL before clicking Project tab: ${page.url()}`);
    if (page.url().includes('/admin') && !page.url().includes('/adminproject')) {
      log.push('‚úÖ Currently on Member page as expected');
    } else {
      log.push('‚ö†Ô∏è Not on expected Member page');
    }

    log.push('üîÑ Attempting to click on Project tab...');
    const startProjectTabClick = Date.now();

    // ‡∏ß‡∏¥‡∏ò‡∏µ 1: ‡πÉ‡∏ä‡πâ role="tab" ‡∏´‡∏≤‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "Project"
    try {
      await page.waitForFunction(() => {
        const tabs = Array.from(document.querySelectorAll('[role="tab"]'));
        return tabs.some(tab => tab.textContent.includes('Project'));
      }, { timeout: 5000 });

      await page.$$eval('[role="tab"]', tabs => {
        const projectTab = tabs.find(tab => tab.textContent.includes('Project'));
        if (projectTab) {
          projectTab.click();
          return true;
        }
        return false;
      });

      log.push('‚úÖ Clicked Project tab using direct selection');
    } catch (e) {
      log.push(`‚ö†Ô∏è Direct click failed: ${e.message}`);
    }

    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ URL ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await new Promise(resolve => setTimeout(resolve, 2000));

    // ‡∏´‡∏≤‡∏Å URL ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    if (!page.url().includes('/adminproject')) {
      log.push('üîÑ Using direct navigation to /adminproject as fallback');
      await page.goto(`${process.env.APP_URL}/adminproject`, { waitUntil: 'networkidle0' });
    }

    const projectTabClickTime = Date.now() - startProjectTabClick;
    log.push(`üìÖ Timestamp: ${now()}`);
    log.push(`‚è±Ô∏è Project Tab Click Time: ${projectTabClickTime} ms`);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤ Project ‡πÅ‡∏•‡πâ‡∏ß
    log.push(`üîç Current URL after attempts: ${page.url()}`);
    if (page.url().includes('/adminproject')) {
      log.push('‚úÖ Successfully navigated to Project page');
    } else {
      log.push('‚ö†Ô∏è Failed to navigate to Project page');
    }

    // ‡∏î‡∏∂‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤ Project
    const projectPageContent = await page.evaluate(() => {
      const title = document.querySelector('h1, h2, h3')?.textContent || 'No title found';
      const hasTable = !!document.querySelector('table');
      const buttonTexts = Array.from(document.querySelectorAll('button'))
        .map(btn => btn.textContent.trim())
        .filter(text => text.length > 0);

      const tabs = Array.from(document.querySelectorAll('[role="tab"]'));
      const projectTab = tabs.find(tab => tab.textContent.includes('Project'));

      const projectTabActive = projectTab && (
        projectTab.getAttribute('aria-selected') === 'true' ||
        projectTab.classList.contains('active') ||
        window.getComputedStyle(projectTab).borderBottomColor.includes('rgb(59, 130, 246)') ||
        projectTab.querySelector('.text-blue-400')
      );

      return {
        title,
        hasTable,
        buttonTexts,
        projectTabActive,
        url: window.location.href
      };
    });

    // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
    fs.writeFileSync(logFilename, log.join('\n'), 'utf8');
    console.log('\nüìù Log saved to', logFilename);
    console.log(log.join('\n'));

  } catch (err) {
    const errorLog = `üìÖ Timestamp: ${now()} ‚ùå Unexpected error: ${err.message}`;
    console.error(errorLog);
    log.push(errorLog);
    fs.writeFileSync(logFilename, log.join('\n'), 'utf8');
  } finally {
    await browser?.close(); // ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
  }
})();
