require('dotenv').config();
const puppeteer = require('puppeteer');
const fs = require('fs');

// üîß ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏∑‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ‡∏ß‡∏±‡∏ô/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡∏õ‡∏µ ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á:‡∏ô‡∏≤‡∏ó‡∏µ:‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
function now() {
  const date = new Date();
  const day = date.getDate().toString().padStart(2, '0');
  const month = (date.getMonth() + 1).toString().padStart(2, '0');
  const year = date.getFullYear();
  const hours = date.getHours().toString().padStart(2, '0');
  const minutes = date.getMinutes().toString().padStart(2, '0');
  const seconds = date.getSeconds().toString().padStart(2, '0');
  return `${day}/${month}/${year} ${hours}:${minutes}:${seconds}`;
}

const logFilename = 'Project_Workflow_log.txt';

(async () => {
  const log = [];
  let browser;

  try {
    browser = await puppeteer.launch({
      headless: false,
      args: [
        '--disable-features=PasswordManagerEnabled,AutomaticPasswordSaving',
        '--disable-save-password-bubble'
      ],
      defaultViewport: null, // ‡πÉ‡∏ä‡πâ viewport ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≠
    });

    const page = await browser.newPage();

    // =================== ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö ===================
    const startFullTest = Date.now();
    log.push(`üìÖ ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${now()}`);
    log.push(`üß™ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£ (Create ‚Üí Detail ‚Üí Edit ‚Üí Delete)`);

    const startLoad = Date.now();
    await page.goto(process.env.APP_URL, { waitUntil: 'networkidle0' });
    const pageLoadTime = Date.now() - startLoad;
    log.push(`üöÄ Page Load Time: ${pageLoadTime} ms`); //‡πÇ‡∏´‡∏•‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô

    // =================== ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô ===================
    const startLogin = Date.now();
    await page.type('#username', process.env.LOGIN_USERNAME);
    await page.type('#password', process.env.LOGIN_PASSWORD);
    await page.click('button[type="submit"]');
    await page.waitForNavigation({ waitUntil: 'networkidle0' });
    const loginTime = Date.now() - startLogin;
    log.push(`üîê Login Time: ${loginTime} ms`);
    log.push(`‚úÖ Login success: ${page.url()}`);

    // =================== ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤ Project ===================
    const startProjectNav = Date.now();
    await page.goto(`${process.env.APP_URL}adminproject`, { waitUntil: 'networkidle0' });
    const projectNavTime = Date.now() - startProjectNav;

    log.push(`‚è±Ô∏è Project Page Navigation Time: ${projectNavTime} ms`);
    if (page.url().includes('adminproject')) {
      // log.push('‚úÖ Successfully navigated to Project page');
    } else {
      throw new Error('Failed to navigate to Project page');
    }

    // =================== ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 0: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà ===================
     const startCreate = Date.now();
    // log.push(`üìÖ ‡πÄ‡∏ß‡∏•‡∏≤: ${now()}`);
    // log.push('üîÑ Looking for Create button...');

    await page.waitForFunction(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      return buttons.some(btn => btn.textContent.includes('Create'));
    }, { timeout: 1100 });

    await page.$$eval('button', buttons => {
      const createButton = buttons.find(btn => btn.textContent.includes('Create'));
      if (createButton) {
        createButton.click();
        return true;
      }
      return false;
    });

    log.push('üü¢ Clicked Create button'); 

    await page.waitForSelector('[role="dialog"]', { timeout: 1100 });
    // log.push('‚úÖ Create Project dialog opened');

    const newProjectName = `Test Project ${Date.now()}`;
    await page.type('[placeholder="Enter project name"]', newProjectName);
    // log.push(`üìù Entered Project Name: ${newProjectName}`);

    try {
      // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡πÉ‡∏´‡πâ‡∏ó‡∏ô‡∏ó‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
      // log.push('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå...');
      
      // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡πÉ‡∏ä‡πâ CSS Selector ‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å dropdown
      await page.waitForSelector('.select-trigger, .dropdown-toggle, select[name="owner"], div[role="combobox"]', { timeout: 1100 });
      
      await page.evaluate(() => {
        // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
        const ownerSelectors = [
          '.select-trigger', 
          '.dropdown-toggle', 
          'select[name="owner"]', 
          'div[role="combobox"]',
          'div[aria-haspopup="listbox"]'
        ];
        
        for (const selector of ownerSelectors) {
          const elements = document.querySelectorAll(selector);
          for (const element of elements) {
            if (element.textContent.includes('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå') || 
                element.textContent.includes('‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á') || 
                element.textContent.includes('Owner')) {
              element.click();
              return;
            }
          }
        }
        
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡∏•‡∏≠‡∏á‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà dropdown ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠‡πÉ‡∏ô‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°
        const form = document.querySelector('form, [role="dialog"]');
        if (form) {
          const dropdowns = form.querySelectorAll('.select-trigger, select, [role="combobox"]');
          if (dropdowns.length > 0) {
            dropdowns[0].click();
          }
        }
      });
      
      // ‡∏£‡∏≠‡∏ô‡∏≤‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏≤‡∏Å‡∏è
      await page.waitForFunction(() => {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
        return document.querySelector('[role="option"], [role="listbox"] li, .dropdown-item, select option') !== null;
      }, { timeout: 8000 });
      
      // ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏£‡∏Å
      await page.evaluate(() => {
        // ‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
        const optionSelectors = [
          '[role="option"]', 
          '[role="listbox"] li', 
          '.dropdown-item', 
          'select option'
        ];
        
        for (const selector of optionSelectors) {
          const options = document.querySelectorAll(selector);
          if (options.length > 0) {
            options[0].click();
            return;
          }
        }
      });
      
      log.push('‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } catch (e) {
      log.push(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡πÑ‡∏î‡πâ: ${e.message}`);
      log.push('‚ÑπÔ∏è ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå');
    }

    await page.type('[placeholder="Enter budget"]', '10000');
    // log.push('üìù Entered Budget: 10,000');

    const today = new Date();
    const startDate = `${today.getFullYear()}-${(today.getMonth() + 1).toString().padStart(2, '0')}-${today.getDate().toString().padStart(2, '0')}`;
    await page.type('input[type="date"]', startDate);
    // log.push(`üìù Entered Start Date: ${startDate}`);

    today.setMonth(today.getMonth() + 1);
    const endDate = `${today.getFullYear()}-${(today.getMonth() + 1).toString().padStart(2, '0')}-${today.getDate().toString().padStart(2, '0')}`;
    await page.$$eval('input[type="date"]', inputs => {
      if (inputs.length > 1) inputs[1].focus();
    });
    await page.keyboard.type(endDate);
    // log.push(`üìù Entered End Date: ${endDate}`);

    const saveStart = Date.now();
    try {
      await page.$$eval('button', buttons => {
        const saveButton = buttons.find(btn => btn.textContent.includes('Save'));
        if (saveButton) {
          saveButton.click();
          return true;
        }
        return false;
      });

      log.push('üü¢ Clicked Save button');
    } catch (e) {
      log.push(`‚ö†Ô∏è Could not click Save button: ${e.message}`);
    }

    try {
      await page.waitForFunction(
        () => !document.querySelector('[role="dialog"]'),
        { timeout: 1100 }
      );
      log.push('‚úÖ Dialog closed after save');
    } catch (e) {
      log.push(`‚ö†Ô∏è Dialog did not close: ${e.message}`);
    }

    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà
    await page.waitForSelector('table', { timeout: 1100 });
    await new Promise(resolve => setTimeout(resolve, 2000)); // ‡∏£‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏´‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
    const projectCountBeforeCreate = await page.evaluate(() => {
      return document.querySelectorAll('table tr').length - 1; // ‡∏´‡∏±‡∏Å‡πÅ‡∏ñ‡∏ß‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    });

    try {
      await page.waitForFunction(
        (expectedProject) => {
          const cells = document.querySelectorAll('td');
          return Array.from(cells).some(cell => cell.textContent.includes(expectedProject));
        },
        { timeout: 1100 },
        newProjectName
      );

      log.push('‚úÖ New project appears in the table');
    } catch (e) {
      log.push(`‚ö†Ô∏è New project not found in table: ${e.message}`);
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á
    const projectCountAfterCreate = await page.evaluate(() => {
      return document.querySelectorAll('table tr').length - 1; // ‡∏´‡∏±‡∏Å‡πÅ‡∏ñ‡∏ß‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    });
    

    const createTime = Date.now() - startCreate;
    log.push(`‚è±Ô∏è Total Create Project Time: ${createTime} ms`);
    log.push(`‚úÖ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 0 ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);

    // =================== ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏∏‡πà‡∏° Detail ===================
    const startDetail = Date.now();
    // log.push(`üìÖ ‡πÄ‡∏ß‡∏•‡∏≤: ${now()}`);
    // log.push('üîÑ Looking for Detail button...');

    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
    await page.waitForSelector('table', { timeout: 1100 });
    // log.push('‚úÖ Project table loaded');

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Detail
    const projectName = await page.evaluate(() => {
      const rows = document.querySelectorAll('tr');
      if (rows.length > 1) { // ‡∏Ç‡πâ‡∏≤‡∏°‡πÅ‡∏ñ‡∏ß‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        const cells = rows[1].querySelectorAll('td');
        if (cells.length > 0) {
          return cells[0].textContent.trim();
        }
      }
      return 'Unknown Project';
    });
    // log.push(`üìã Testing project: ${projectName}`);

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Detail ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡πÅ‡∏£‡∏Å
    const detailButtonClicked = await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      const detailButton = buttons.find(btn => btn.textContent.includes('Detail'));
      if (detailButton) {
        detailButton.click();
        return true;
      }
      return false;
    });

    if (!detailButtonClicked) {
      throw new Error('Detail button not found or could not be clicked');
    }

    log.push('üü¢ Clicked Detail button');

    // =================== ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå ===================
    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à (‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ï‡πá‡∏°‡∏´‡∏£‡∏∑‡∏≠ dialog)
    await page.waitForFunction(() => {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå
      return document.querySelector('div') !== null &&
        document.body.innerText.includes('Budget') &&
        document.body.innerText.includes('Status');
    }, { timeout: 1100 });
    // log.push('‚úÖ Project details loaded');

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á
    const detailsShown = await page.evaluate((expectedName) => {
      const elements = {
        projectName: document.body.innerText.includes(expectedName),
        budget: document.body.innerText.includes('Budget:'),
        status: document.body.innerText.includes('Status:'),
        startDate: document.body.innerText.includes('Start Date:'),
        endDate: document.body.innerText.includes('End Date:'),
        membersTab: document.body.innerText.includes('Members'),
        tasksTab: document.body.innerText.includes('Tasks')
      };

      return elements;
    }, projectName);

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
    // log.push(`‚úÖ Project name shown: ${detailsShown.projectName ? 'Yes' : 'No'}`);
    // log.push(`‚úÖ Budget shown: ${detailsShown.budget ? 'Yes' : 'No'}`);
    // log.push(`‚úÖ Status shown: ${detailsShown.status ? 'Yes' : 'No'}`);
    // log.push(`‚úÖ Start Date shown: ${detailsShown.startDate ? 'Yes' : 'No'}`);
    // log.push(`‚úÖ End Date shown: ${detailsShown.endDate ? 'Yes' : 'No'}`);
    // log.push(`‚úÖ Members tab shown: ${detailsShown.membersTab ? 'Yes' : 'No'}`);
    // log.push(`‚úÖ Tasks tab shown: ${detailsShown.tasksTab ? 'Yes' : 'No'}`);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÅ‡∏ó‡πá‡∏ö Members ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    const isMembersTabActive = await page.evaluate(() => {
      return document.body.innerText.includes('Project Members');
    });
    // log.push(`‚úÖ Members tab active by default: ${isMembersTabActive ? 'Yes' : 'No'}`);

    await new Promise(r => setTimeout(r, 2000));

    // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏¥‡∏î
    await page.$$eval('button', buttons => {
      const closeButton = buttons.find(btn =>
        btn.textContent.includes('Back to Projects') ||
        btn.textContent.includes('Close') ||
        btn.textContent.includes('‚Üê') ||
        btn.textContent.includes('√ó')

      );
      if (closeButton) {
        closeButton.click();
        return true;
      }
      return false;
    });
    log.push('üü¢ Clicked Close/Back button');

    await new Promise(r => setTimeout(r, 1000)); 

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå
    await page.waitForSelector('table', { timeout: 1100 });
    log.push('‚úÖ Returned to projects page');

    const detailTime = Date.now() - startDetail;
    log.push(`‚è±Ô∏è Total Detail Testing Time: ${detailTime} ms`);
    // log.push(`üåê Final URL: ${page.url()}`);
    log.push(`‚úÖ STEP 1 COMPLETE: Detail testing successful`);

    // =================== ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏∏‡πà‡∏° Edit ===================
    const startEdit = Date.now();
    // log.push(`üìÖ ‡πÄ‡∏ß‡∏•‡∏≤: ${now()}`);
    // log.push('üîÑ Looking for Edit button...');

    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
    await page.waitForSelector('table', { timeout: 1100 });
    // log.push('‚úÖ Project table loaded');

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    const originalProjectInfo = await page.evaluate(() => {
      const rows = document.querySelectorAll('tr');
      if (rows.length > 1) { // ‡∏Ç‡πâ‡∏≤‡∏°‡πÅ‡∏ñ‡∏ß‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        const cells = rows[1].querySelectorAll('td');
        if (cells.length > 0) {
          return {
            name: cells[0].textContent.trim(),
            budget: cells[1] ? cells[1].textContent.trim() : 'N/A',
            status: cells[2] ? cells[2].textContent.trim() : 'N/A'
          };
        }
      }
      return { name: 'Unknown Project', budget: 'N/A', status: 'N/A' };
    });
    
    // log.push(`üìã Testing project: ${originalProjectInfo.name}`);
    // log.push(`üìã Current budget: ${originalProjectInfo.budget}`);
    // log.push(`üìã Current status: ${originalProjectInfo.status}`);

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Edit ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡πÅ‡∏£‡∏Å
    const editButtonClicked = await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      const editButton = buttons.find(btn => btn.textContent.includes('Edit'));
      if (editButton) {
        editButton.click();
        return true;
      }
      return false;
    });

    if (!editButtonClicked) {
      throw new Error('Edit button not found or could not be clicked');
    }
    
    // log.push('üü¢ Clicked Edit button');

    // =================== ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà Dialog ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå ===================
    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ Dialog ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡πÄ‡∏õ‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
    await page.waitForSelector('[role="dialog"]', { timeout: 1100 });
    // log.push('‚úÖ Edit Project dialog opened');

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    const formHasCurrentValues = await page.evaluate((expectedName) => {
      const nameInput = document.querySelector('[placeholder="Enter project name"]');
      return nameInput && nameInput.value.includes(expectedName);
    }, originalProjectInfo.name);
    
    // log.push(`‚úÖ Form shows current project name: ${formHasCurrentValues ? 'Yes' : 'No'}`);

    // =================== ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå ===================
    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå
    const editedProjectName = `Edited Project ${Date.now()}`;
    await page.evaluate(() => {
      const nameInput = document.querySelector('[placeholder="Enter project name"]');
      if (nameInput) {
        nameInput.value = '';
      }
    });
    await page.type('[placeholder="Enter project name"]', editedProjectName);
    // log.push(`üìù Changed Project Name to: ${editedProjectName}`);

    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå
    try {
      log.push('üîÑ Changing project owner...');
      // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà dropdown ‡∏Ç‡∏≠‡∏á Owner
      await page.evaluate(() => {
        const ownerDropdowns = document.querySelectorAll('.select-trigger');
        // This assumes the owner dropdown is the first one. A more robust selector might be needed.
        if(ownerDropdowns.length > 0) {
            ownerDropdowns[0].click();
        } else {
            throw new Error('Owner dropdown trigger not found');
        }
      });

      // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏™‡∏î‡∏á
      await page.waitForSelector('[role="option"]', { timeout: 1100 });
      log.push('‚úÖ Owner options are visible');

      // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡πÉ‡∏´‡∏°‡πà (‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á‡πÉ‡∏ô‡∏•‡∏¥‡∏™‡∏ï‡πå, ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á)
      await page.evaluate(() => {
        const options = document.querySelectorAll('[role="option"]');
        if (options.length > 1) {
          // options[0] might be "No owner" or the current owner, so we select the next one.
          options[1].click(); 
        } else if (options.length === 1) {
          options[0].click();
        } else {
          throw new Error("No owner options found to select.");
        }
      });
      log.push('‚úÖ Selected a new owner');
    } catch (e) {
        log.push(`‚ö†Ô∏è Could not change project owner: ${e.message}`);
    }

    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
    const newBudget = '20000';
    await page.evaluate(() => {
      const budgetInput = document.querySelector('[placeholder="Enter budget"]');
      if (budgetInput) {
        budgetInput.value = '';
      }
    });
    await page.type('[placeholder="Enter budget"]', newBudget);
    // log.push(`üìù Changed Budget to: ${newBudget}`);

    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    await page.$$eval('.select-trigger', selects => {
      const statusSelect = selects.find(select => 
        select.textContent.includes('In progress') || 
        select.textContent.includes('Completed') ||
        select.textContent.includes('Suspend operations') ||
        select.textContent.includes('Project Cancellation')
      );
      if (statusSelect) statusSelect.click();
    });

    await page.waitForSelector('[role="option"]', { timeout: 1100 });
    
    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "Completed"
    await page.$$eval('[role="option"]', options => {
      const completedOption = options.find(option => option.textContent.includes('Completed'));
      if (completedOption) completedOption.click();
    });
    
    // log.push('üìù Changed Status to: Completed');


    // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Update
const startUpdate = Date.now(); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
await page.$$eval('button', buttons => {
  const updateButton = buttons.find(btn => btn.textContent.includes('Update'));
  if (updateButton) {
    updateButton.click();
    return true;
  }
  return false;
});
    
log.push('üü¢ Clicked Update button');

// ‡∏£‡∏≠‡πÉ‡∏´‡πâ Dialog ‡∏õ‡∏¥‡∏î (‡∏õ‡∏∏‡πà‡∏° Update ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏¥‡∏î Dialog ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à)
try {
  await page.waitForFunction(
    () => !document.querySelector('[role="dialog"]'),
    { timeout: 1100 } 
  );
  const updateTime = Date.now() - startUpdate; // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
  // log.push('‚úÖ Dialog closed after update');
  log.push(`‚è±Ô∏è Time to close dialog after Update: ${updateTime} ms`);
} catch (e) {
  log.push(`‚ö†Ô∏è Dialog did not close: ${e.message}`);
}

    // =================== ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ===================
    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà
    await page.waitForSelector('table', { timeout: 1100 });
    // log.push('‚úÖ Project table reloaded');

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    const updatedProjectInfo = await page.evaluate((expectedName) => {
      const rows = document.querySelectorAll('tr');
      
      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
      let projectRow = null;
      for (let i = 1; i < rows.length; i++) {
        const cells = rows[i].querySelectorAll('td');
        if (cells.length > 0 && cells[0].textContent.trim().includes(expectedName)) {
          projectRow = rows[i];
          break;
        }
      }
      
      if (projectRow) {
        const cells = projectRow.querySelectorAll('td');
        return {
          found: true,
          name: cells[0].textContent.trim(),
          budget: cells[1] ? cells[1].textContent.trim() : 'N/A',
          status: cells[2] ? cells[2].textContent.trim() : 'N/A'
        };
      }
      
      return { found: false };
    }, editedProjectName);

    if (updatedProjectInfo.found) {
      // log.push('‚úÖ Updated project found in table');
      // log.push(`üìã Updated project name: ${updatedProjectInfo.name}`);
      // log.push(`üìã Updated budget: ${updatedProjectInfo.budget}`);
      // log.push(`üìã Updated status: ${updatedProjectInfo.status}`);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (updatedProjectInfo.name.includes(editedProjectName)) {
        // log.push('‚úÖ Project name was updated correctly');
      } else {
        log.push('‚ö†Ô∏è Project name was not updated as expected');
      }
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì (‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÄ‡∏ä‡πà‡∏ô "20,000")
      if (updatedProjectInfo.budget.includes('20') || updatedProjectInfo.budget.includes('20,000')) {
        // log.push('‚úÖ Budget was updated correctly');
      } else {
        log.push('‚ö†Ô∏è Budget was not updated as expected');
      }
      
      if (updatedProjectInfo.status.includes('Completed')) {
        // log.push('‚úÖ Status was updated correctly');
      } else {
        log.push('‚ö†Ô∏è Status was not updated as expected');
      }
    } else {
      log.push('‚ö†Ô∏è Could not find updated project in table');
    }

    const editTime = Date.now() - startEdit;
    log.push(`‚è±Ô∏è Total Edit Testing Time: ${editTime} ms`);
    // log.push(`üåê Final URL: ${page.url()}`);
    log.push(`‚úÖ STEP 2 COMPLETE: Edit testing successful`);

    // =================== ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏∏‡πà‡∏° Delete ===================
    const startDelete = Date.now();
    // log.push(`üìÖ ‡πÄ‡∏ß‡∏•‡∏≤: ${now()}`);
    // log.push('üîÑ Testing Delete Project functionality...');

    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
    await page.waitForSelector('table', { timeout: 1100 });
    log.push('‚úÖ Project table loaded');

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö
    const projectToDelete = await page.evaluate(() => {
      const rows = document.querySelectorAll('tr');
      if (rows.length > 1) { // ‡∏Ç‡πâ‡∏≤‡∏°‡πÅ‡∏ñ‡∏ß‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        const cells = rows[1].querySelectorAll('td');
        if (cells.length > 0) {
          return {
            name: cells[0].textContent.trim(),
            id: cells[0].closest('tr').getAttribute('data-project-id') || 'Unknown ID'
          };
        }
      }
      return { name: 'Unknown Project', id: 'Unknown ID' };
    });
    
    // log.push(`üìã Testing delete on project: ${projectToDelete.name}`);
    // log.push(`üìã Project ID: ${projectToDelete.id}`);

    // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö
    const projectCountBefore = await page.evaluate(() => {
      return document.querySelectorAll('table tr').length - 1; // ‡∏´‡∏±‡∏Å‡πÅ‡∏ñ‡∏ß‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    });
    
    // log.push(`üìä Project count before delete: ${projectCountBefore}`);

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Delete ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡πÅ‡∏£‡∏Å
    const deleteButtonClicked = await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      const deleteButton = buttons.find(btn => btn.textContent.includes('Delete'));
      if (deleteButton) {
        deleteButton.click();
        return true;
      }
      return false;
    });

    if (!deleteButtonClicked) {
      throw new Error('Delete button not found or could not be clicked');
    }
    
    log.push('üü¢ Clicked Delete button');

    // =================== ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Dialog ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö ===================
    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ Dialog ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÄ‡∏õ‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
    await page.waitForSelector('[role="dialog"]', { timeout: 1100 });
    // log.push('‚úÖ Delete confirmation dialog opened');

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Dialog ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    const dialogContent = await page.evaluate(() => {
      const dialog = document.querySelector('[role="dialog"]');
      return dialog ? dialog.textContent : '';
    });
    
    if (dialogContent.includes(projectToDelete.name)) {
      // log.push('‚úÖ Dialog shows correct project name');
    } else {
      log.push('‚ö†Ô∏è Dialog may not show correct project information');
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏õ‡∏∏‡πà‡∏° Cancel ‡πÅ‡∏•‡∏∞ Delete ‡πÉ‡∏ô Dialog
    const hasButtons = await page.evaluate(() => {
      const dialog = document.querySelector('[role="dialog"]');
      const buttons = dialog ? dialog.querySelectorAll('button') : [];
      return {
        hasCancel: Array.from(buttons).some(btn => btn.textContent.includes('Cancel')),
        hasDelete: Array.from(buttons).some(btn => btn.textContent.includes('Delete'))
      };
    });
    
    if (hasButtons.hasCancel) {
      // log.push('‚úÖ Dialog has Cancel button');
    } else {
      log.push('‚ö†Ô∏è Cancel button not found in dialog');
    }
    
    if (hasButtons.hasDelete) {
      // log.push('‚úÖ Dialog has Delete button');
    } else {
      log.push('‚ö†Ô∏è Delete button not found in dialog');
    }

    // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Delete ‡πÉ‡∏ô Dialog
    await page.evaluate(() => {
      const dialog = document.querySelector('[role="dialog"]');
      const buttons = dialog ? dialog.querySelectorAll('button') : [];
      const deleteButton = Array.from(buttons).find(btn => btn.textContent.includes('Delete'));
      if (deleteButton) {
        deleteButton.click();
        return true;
      }
      return false;
    });
    
    // log.push('üü¢ Clicked Delete button in confirmation dialog');

    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ Dialog ‡∏õ‡∏¥‡∏î (‡∏õ‡∏∏‡πà‡∏° Delete ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏¥‡∏î Dialog ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à)
    try {
      await page.waitForFunction(
        () => !document.querySelector('[role="dialog"]'),
        { timeout: 1100 }
      );
      // log.push('‚úÖ Dialog closed after delete');
    } catch (e) {
      log.push(`‚ö†Ô∏è Dialog did not close: ${e.message}`);
    }

    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ Toast notification ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡∏∂‡πâ‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    try {
      await page.waitForFunction(
        () => {
          const toast = document.querySelector('[role="status"]');
          return toast !== null;
        },
        { timeout: 1100 }
      );
      
      const toastMessage = await page.evaluate(() => {
        const toast = document.querySelector('[role="status"]');
        return toast ? toast.textContent : '';
      });
      
      log.push(`‚úÖ Toast notification appeared: "${toastMessage}"`);
    } catch (e) {
      log.push('‚ÑπÔ∏è No toast notification detected');
    }

    // =================== ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ===================
    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà
    await page.waitForSelector('table', { timeout: 1100 });
    // log.push('‚úÖ Project table reloaded');

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÑ‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const projectStillExists = await page.evaluate((projectName) => {
      const cells = document.querySelectorAll('td');
      return Array.from(cells).some(cell => cell.textContent.includes(projectName));
    }, projectToDelete.name);
    
    if (!projectStillExists) {
      // log.push('‚úÖ Project was successfully deleted and removed from table');
    } else {
      log.push('‚ö†Ô∏è Project still appears in table after delete attempt');
    }

    // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏´‡∏•‡∏±‡∏á‡∏•‡∏ö
    const projectCountAfter = await page.evaluate(() => {
      return document.querySelectorAll('table tr').length - 1; // ‡∏´‡∏±‡∏Å‡πÅ‡∏ñ‡∏ß‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    });
    
    // log.push(`üìä Project count after delete: ${projectCountAfter}`);
    
    if (projectCountAfter < projectCountBefore) {
      // log.push('‚úÖ Number of projects decreased as expected');
    } else {
      log.push('‚ö†Ô∏è Number of projects did not decrease');
    }

    const deleteTime = Date.now() - startDelete;
    log.push(`‚è±Ô∏è Total Delete Testing Time: ${deleteTime} ms`);
    // log.push(`üåê Final URL: ${page.url()}`);
    log.push(`‚úÖ STEP 3 COMPLETE: Delete testing successful`);

    // =================== ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö ===================
    const totalTestTime = Date.now() - startFullTest;
    log.push(`üìÖ ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ${now()}`);
    log.push(`‚è±Ô∏è ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${totalTestTime} ms`);
    log.push(`üîç ‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô:`);
    log.push(`   - Create: ${createTime} ms`);
    log.push(`   - Detail: ${detailTime} ms`);
    log.push(`   - Edit: ${editTime} ms`);
    log.push(`   - Delete: ${deleteTime} ms`);
    log.push(`üåê Final URL: ${page.url()}`);
    log.push(`‚úÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô (Create ‚Üí Detail ‚Üí Edit ‚Üí Delete)`);

    fs.writeFileSync(logFilename, log.join('\n'), 'utf8');
    console.log('\nüìù Log saved to', logFilename);
    console.log(log.join('\n'));

  } catch (err) {
    const errorLog = `üìÖ ‡πÄ‡∏ß‡∏•‡∏≤: ${now()} ‚ùå Unexpected error: ${err.message}`;
    console.error(errorLog);
    log.push(errorLog);
    fs.writeFileSync(logFilename, log.join('\n'), 'utf8');
  } finally {
    await new Promise(r => setTimeout(r, 1000)); // ‡∏ä‡∏∞‡∏•‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå

    await browser?.close();
  }
})();