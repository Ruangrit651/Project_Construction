require('dotenv').config();
const puppeteer = require('puppeteer');
const fs = require('fs');

// üîß ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏∑‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ‡∏ß‡∏±‡∏ô/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡∏õ‡∏µ ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á:‡∏ô‡∏≤‡∏ó‡∏µ:‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
function now() {
  const date = new Date();
  const day = date.getDate().toString().padStart(2, '0');
  const month = (date.getMonth() + 1).toString().padStart(2, '0');
  const year = date.getFullYear();
  const hours = date.getHours().toString().padStart(2, '0');
  const minutes = date.getMinutes().toString().padStart(2, '0');
  const seconds = date.getSeconds().toString().padStart(2, '0');
  return `${day}/${month}/${year} ${hours}:${minutes}:${seconds}`;
}

const logFilename = 'Project_Edit_log.txt';

(async () => {
  const log = [];
  let browser;

  try {
    browser = await puppeteer.launch({
      headless: false,
      args: [
        '--disable-features=PasswordManagerEnabled,AutomaticPasswordSaving',
        '--disable-save-password-bubble'
      ]
    });

    const page = await browser.newPage();

    // =================== ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö ===================
    const startLoad = Date.now();
    await page.goto(process.env.APP_URL, { waitUntil: 'networkidle0' });
    const pageLoadTime = Date.now() - startLoad;
    log.push(`üìÖ ‡πÄ‡∏ß‡∏•‡∏≤: ${now()}`);
    log.push(`üöÄ Page Load Time: ${pageLoadTime} ms`);

    // =================== ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô ===================
    const startLogin = Date.now();
    await page.type('#username', process.env.LOGIN_USERNAME);
    await page.type('#password', process.env.LOGIN_PASSWORD);
    await page.click('button[type="submit"]');
    await page.waitForNavigation({ waitUntil: 'networkidle0' });
    const loginTime = Date.now() - startLogin;
    log.push(`üîê Login Time: ${loginTime} ms`);
    log.push(`‚úÖ Login success: ${page.url()}`);

    // =================== ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤ Project ===================
    log.push(`üìÖ ‡πÄ‡∏ß‡∏•‡∏≤: ${now()}`);
    log.push('üîÑ Navigating to Project page...');
    
    await page.goto(`${process.env.APP_URL}/adminproject`, { waitUntil: 'networkidle0' });
    
    log.push(`üîç Current URL: ${page.url()}`);
    if (page.url().includes('/adminproject')) {
      log.push('‚úÖ Successfully navigated to Project page');
    } else {
      throw new Error('Failed to navigate to Project page');
    }
    
    // =================== ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ===================
    await page.waitForSelector('table', { timeout: 5000 });
    
    const hasProjects = await page.evaluate(() => {
      const rows = document.querySelectorAll('table tr');
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÅ‡∏ñ‡∏ß‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡πÅ‡∏ñ‡∏ß (‡∏°‡∏µ‡πÅ‡∏ñ‡∏ß‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•) ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå
      return rows.length > 1;
    });
    
    if (!hasProjects) {
      log.push('‚ö†Ô∏è No projects found. Creating a new project first...');
      
      // =================== ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà ===================
      log.push('üîÑ Looking for Create button...');
      
      await page.waitForFunction(() => {
        const buttons = Array.from(document.querySelectorAll('button'));
        return buttons.some(btn => btn.textContent.includes('Create'));
      }, { timeout: 5000 });
      
      await page.$$eval('button', buttons => {
        const createButton = buttons.find(btn => btn.textContent.includes('Create'));
        if (createButton) {
          createButton.click();
          return true;
        }
        return false;
      });
      
      log.push('üü¢ Clicked Create button');
      
      await page.waitForSelector('[role="dialog"]', { timeout: 5000 });
      log.push('‚úÖ Create Project dialog opened');
      
      const projectName = `Test Project ${Date.now()}`;
      await page.type('[placeholder="Enter project name"]', projectName);
      log.push(`üìù Entered Project Name: ${projectName}`);
      
      try {
        await page.$$eval('.select-trigger', selects => {
          const ownerSelect = selects.find(select => 
            select.textContent.includes('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå')
          );
          if (ownerSelect) ownerSelect.click();
        });
        
        await page.waitForSelector('[role="option"]', { timeout: 3000 });
        
        await page.$$eval('[role="option"]', options => {
          if (options.length > 0) options[0].click();
        });
        
        log.push('‚úÖ Selected project owner');
      } catch (e) {
        log.push(`‚ö†Ô∏è Could not select project owner: ${e.message}`);
      }
      
      await page.type('[placeholder="Enter budget"]', '10000');
      log.push('üìù Entered Budget: 10,000');
      
      await page.type('[placeholder="Enter actual"]', '5000');
      log.push('üìù Entered Actual: 5,000');
      
      const today = new Date();
      const startDate = `${today.getFullYear()}-${(today.getMonth() + 1).toString().padStart(2, '0')}-${today.getDate().toString().padStart(2, '0')}`;
      await page.type('input[type="date"]', startDate);
      log.push(`üìù Entered Start Date: ${startDate}`);
      
      today.setMonth(today.getMonth() + 1);
      const endDate = `${today.getFullYear()}-${(today.getMonth() + 1).toString().padStart(2, '0')}-${today.getDate().toString().padStart(2, '0')}`;
      await page.$$eval('input[type="date"]', inputs => {
        if (inputs.length > 1) inputs[1].focus();
      });
      await page.keyboard.type(endDate);
      log.push(`üìù Entered End Date: ${endDate}`);
      
      await page.$$eval('button', buttons => {
        const saveButton = buttons.find(btn => btn.textContent.includes('Save'));
        if (saveButton) {
          saveButton.click();
          return true;
        }
        return false;
      });
      
      log.push('üü¢ Clicked Save button');
      
      try {
        await page.waitForFunction(
          () => !document.querySelector('[role="dialog"]'),
          { timeout: 5000 }
        );
        log.push('‚úÖ Dialog closed after save');
      } catch (e) {
        log.push(`‚ö†Ô∏è Dialog did not close: ${e.message}`);
      }
      
      try {
        await page.waitForFunction(
          (expectedProject) => {
            const cells = document.querySelectorAll('td');
            return Array.from(cells).some(cell => cell.textContent.includes(expectedProject));
          },
          { timeout: 5000 },
          projectName
        );
        
        log.push('‚úÖ New project created and appears in the table');
      } catch (e) {
        log.push(`‚ö†Ô∏è New project not found in table: ${e.message}`);
        throw new Error('Failed to create a new project');
      }
      
      // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÉ‡∏´‡πâ UI ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó
      await page.waitForTimeout(1000);
    }

    // =================== ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Edit ===================
    const startEdit = Date.now();
    log.push(`üìÖ ‡πÄ‡∏ß‡∏•‡∏≤: ${now()}`);
    log.push('üîÑ Looking for Edit button...');

    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
    await page.waitForSelector('table', { timeout: 5000 });
    log.push('‚úÖ Project table loaded');

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    const originalProjectInfo = await page.evaluate(() => {
      const rows = document.querySelectorAll('tr');
      if (rows.length > 1) { // ‡∏Ç‡πâ‡∏≤‡∏°‡πÅ‡∏ñ‡∏ß‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        const cells = rows[1].querySelectorAll('td');
        if (cells.length > 0) {
          return {
            name: cells[0].textContent.trim(),
            budget: cells[1] ? cells[1].textContent.trim() : 'N/A',
            status: cells[2] ? cells[2].textContent.trim() : 'N/A'
          };
        }
      }
      return { name: 'Unknown Project', budget: 'N/A', status: 'N/A' };
    });
    
    log.push(`üìã Testing project: ${originalProjectInfo.name}`);
    log.push(`üìã Current budget: ${originalProjectInfo.budget}`);
    log.push(`üìã Current status: ${originalProjectInfo.status}`);

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Edit ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡πÅ‡∏£‡∏Å
    const editButtonClicked = await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      const editButton = buttons.find(btn => btn.textContent.includes('Edit'));
      if (editButton) {
        editButton.click();
        return true;
      }
      return false;
    });

    if (!editButtonClicked) {
      throw new Error('Edit button not found or could not be clicked');
    }
    
    log.push('üü¢ Clicked Edit button');

    // =================== ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà Dialog ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå ===================
    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ Dialog ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡πÄ‡∏õ‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
    await page.waitForSelector('[role="dialog"]', { timeout: 5000 });
    log.push('‚úÖ Edit Project dialog opened');


    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    const formHasCurrentValues = await page.evaluate((expectedName) => {
      const nameInput = document.querySelector('[placeholder="Enter project name"]');
      return nameInput && nameInput.value.includes(expectedName);
    }, originalProjectInfo.name);
    
    log.push(`‚úÖ Form shows current project name: ${formHasCurrentValues ? 'Yes' : 'No'}`);

    // =================== ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå ===================
    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå
    const newProjectName = `Edited Project ${Date.now()}`;
    await page.evaluate(() => {
      const nameInput = document.querySelector('[placeholder="Enter project name"]');
      if (nameInput) {
        nameInput.value = '';
      }
    });
    await page.type('[placeholder="Enter project name"]', newProjectName);
    log.push(`üìù Changed Project Name to: ${newProjectName}`);

    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
    const newBudget = '20000';
    await page.evaluate(() => {
      const budgetInput = document.querySelector('[placeholder="Enter budget"]');
      if (budgetInput) {
        budgetInput.value = '';
      }
    });
    await page.type('[placeholder="Enter budget"]', newBudget);
    log.push(`üìù Changed Budget to: ${newBudget}`);

    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    await page.$$eval('.select-trigger', selects => {
      const statusSelect = selects.find(select => 
        select.textContent.includes('In progress') || 
        select.textContent.includes('Completed') ||
        select.textContent.includes('Suspend operations') ||
        select.textContent.includes('Project Cancellation')
      );
      if (statusSelect) statusSelect.click();
    });

    await page.waitForSelector('[role="option"]', { timeout: 3000 });
    
    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "Completed"
    await page.$$eval('[role="option"]', options => {
      const completedOption = options.find(option => option.textContent.includes('Completed'));
      if (completedOption) completedOption.click();
    });
    
    log.push('üìù Changed Status to: Completed');

    // // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Update
    // await page.waitForTimeout(1000);

    // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Update
    await page.$$eval('button', buttons => {
      const updateButton = buttons.find(btn => btn.textContent.includes('Update'));
      if (updateButton) {
        updateButton.click();
        return true;
      }
      return false;
    });
    
    log.push('üü¢ Clicked Update button');

    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ Dialog ‡∏õ‡∏¥‡∏î (‡∏õ‡∏∏‡πà‡∏° Update ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏¥‡∏î Dialog ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à)
    try {
      await page.waitForFunction(
        () => !document.querySelector('[role="dialog"]'),
        { timeout: 10000 }
      );
      log.push('‚úÖ Dialog closed after update');
    } catch (e) {
      log.push(`‚ö†Ô∏è Dialog did not close: ${e.message}`);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const errorMessage = await page.evaluate(() => {
        return document.body.innerText.includes('error') || document.body.innerText.includes('Error');
      });
      
      if (errorMessage) {
        log.push('‚ö†Ô∏è Error message detected on dialog');
      }
      
      // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Cancel ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î Dialog
      await page.$$eval('button', buttons => {
        const cancelButton = buttons.find(btn => btn.textContent.includes('Cancel'));
        if (cancelButton) {
          cancelButton.click();
          return true;
        }
        return false;
      });
      
      log.push('üü¢ Attempted to click Cancel button');
    }

    // =================== ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ===================
    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà
    await page.waitForSelector('table', { timeout: 5000 });
    log.push('‚úÖ Project table reloaded');

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    const updatedProjectInfo = await page.evaluate((expectedName) => {
      const rows = document.querySelectorAll('tr');
      
      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
      let projectRow = null;
      for (let i = 1; i < rows.length; i++) {
        const cells = rows[i].querySelectorAll('td');
        if (cells.length > 0 && cells[0].textContent.trim().includes(expectedName)) {
          projectRow = rows[i];
          break;
        }
      }
      
      if (projectRow) {
        const cells = projectRow.querySelectorAll('td');
        return {
          found: true,
          name: cells[0].textContent.trim(),
          budget: cells[1] ? cells[1].textContent.trim() : 'N/A',
          status: cells[2] ? cells[2].textContent.trim() : 'N/A'
        };
      }
      
      return { found: false };
    }, newProjectName);

    if (updatedProjectInfo.found) {
      log.push('‚úÖ Updated project found in table');
      log.push(`üìã Updated project name: ${updatedProjectInfo.name}`);
      log.push(`üìã Updated budget: ${updatedProjectInfo.budget}`);
      log.push(`üìã Updated status: ${updatedProjectInfo.status}`);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (updatedProjectInfo.name.includes(newProjectName)) {
        log.push('‚úÖ Project name was updated correctly');
      } else {
        log.push('‚ö†Ô∏è Project name was not updated as expected');
      }
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì (‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÄ‡∏ä‡πà‡∏ô "20,000")
      if (updatedProjectInfo.budget.includes('20') || updatedProjectInfo.budget.includes('20,000')) {
        log.push('‚úÖ Budget was updated correctly');
      } else {
        log.push('‚ö†Ô∏è Budget was not updated as expected');
      }
      
      if (updatedProjectInfo.status.includes('Completed')) {
        log.push('‚úÖ Status was updated correctly');
      } else {
        log.push('‚ö†Ô∏è Status was not updated as expected');
      }
    } else {
      log.push('‚ö†Ô∏è Could not find updated project in table');
    }

    const editTime = Date.now() - startEdit;
    log.push(`‚è±Ô∏è Total Edit Testing Time: ${editTime} ms`);
    log.push(`üåê Final URL: ${page.url()}`);

    fs.writeFileSync(logFilename, log.join('\n'), 'utf8');
    console.log('\nüìù Log saved to', logFilename);
    console.log(log.join('\n'));

  } catch (err) {
    const errorLog = `üìÖ ‡πÄ‡∏ß‡∏•‡∏≤: ${now()} ‚ùå Unexpected error: ${err.message}`;
    console.error(errorLog);
    log.push(errorLog);
    fs.writeFileSync(logFilename, log.join('\n'), 'utf8');
  } finally {
    await new Promise(r => setTimeout(r, 5000)); // ‡∏ä‡∏∞‡∏•‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå -----------------------------------------------------
    
    await browser?.close();
  }
})();