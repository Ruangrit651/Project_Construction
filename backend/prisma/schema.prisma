datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Category Model
model categories {
  id             String     @id @default(uuid()) @db.Uuid
  category_name  String     @unique
  created_at     DateTime   @default(now())
  updated_at     DateTime?  @updatedAt
  created_by     String?
  updated_by     String?

  products       product[]
}

// Product Model
model product {
  id            String     @id @default(uuid()) @db.Uuid
  product_name  String
  price         Float
  category_id   String     @db.Uuid
  created_at    DateTime   @default(now())
  updated_at    DateTime?  @updatedAt
  created_by    String?    @db.Uuid
  updated_by    String?    @db.Uuid

  // Relations
  category      categories @relation(fields: [category_id], references: [id])
  created       user?      @relation("ProductCreatedBy", fields: [created_by], references: [user_id])
  updated       user?      @relation("ProductUpdatedBy", fields: [updated_by], references: [user_id])
}

// Project Model
model project {
  project_id     String     @id @default(uuid()) @db.Uuid
  project_name   String     @unique               
  budget         Decimal?   @db.Decimal(15, 2)           
  actual         Decimal?    @db.Decimal(15, 2)   
  start_date     String                    
  end_date       String?                   
  status         String                
  project_image  String?    @db.VarChar(255)
  created_at     DateTime   @default(now())               
  created_by     String?    @db.Uuid                                  
  updated_at     DateTime?  @updatedAt                    
  updated_by     String?    @db.Uuid              

  // Relations
  created        user?      @relation("ProjectCreatedBy", fields: [created_by], references: [user_id])
  updated        user?      @relation("ProjectUpdatedBy", fields: [updated_by], references: [user_id])
  users          user[]     
  tasks          task[]
}

// User Model
model user {
  user_id       String   @id @default(uuid()) @db.Uuid
  project_id    String?  @db.Uuid
  role          String   @db.VarChar(255)
  username      String   @db.VarChar(255) @unique
  password      String   @db.VarChar(255)
  created_at    DateTime @default(now())
  created_by    String?  @db.Uuid
  updated_at    DateTime @updatedAt
  updated_by    String?  @db.Uuid

  
  // Relations
  created       user?      @relation("CreatedBy", fields: [created_by], references: [user_id])
  updated       user?      @relation("UpdatedBy", fields: [updated_by], references: [user_id])
  roles         role?      @relation(fields: [role], references: [name])
  projects      project?   @relation(fields: [project_id], references: [project_id])

  createdUsers  user[]     @relation("CreatedBy")
  updatedUsers  user[]     @relation("UpdatedBy")

  
  createdProducts  product[]     @relation("ProductCreatedBy")
  updatedProducts  product[]     @relation("ProductUpdatedBy")

  createdProjects  project[]     @relation("ProjectCreatedBy")
  updatedProjects  project[]     @relation("ProjectUpdatedBy")

  createdTasks     task[]        @relation("TaskCreatedBy")
  updatedTasks     task[]        @relation("TaskUpdatedBy")

  createdPlans     plan[]        @relation("PlanCreatedBy")
  updatedPlans     plan[]        @relation("PlanUpdatedBy")

  createdResources resource[]    @relation("ResourceCreatedBy")
  updatedResources resource[]    @relation("ResourceUpdatedBy")
}

// Permissions Model
model role {
  role_id   String   @id @default(uuid()) @db.Uuid
  name      String   @db.VarChar(255) @unique

  users     user[]
}

// Task Model
model task {
  task_id       String     @id @default(uuid()) @db.Uuid
  project_id    String?    @db.Uuid
  task_name     String     @db.VarChar(255)
  description   String?
  budget        Decimal    @db.Decimal(15, 2)
  start_date    String
  end_date      String?
  status        String     
  created_at    DateTime   @default(now())
  created_by    String?    @db.Uuid
  updated_at    DateTime?  @updatedAt
  updated_by    String?    @db.Uuid

  // dependencies  String[]   @db.VarChar(255)  // เก็บเป็น array ของ task_id

  // Relations
  created       user?      @relation("TaskCreatedBy", fields: [created_by], references: [user_id])
  updated       user?      @relation("TaskUpdatedBy", fields: [updated_by], references: [user_id])
  projects      project?   @relation(fields: [project_id], references: [project_id])
  resources     resource[]
}


// Plan Model
model plan {
  plan_id       String     @id @default(uuid()) @db.Uuid
  description   String?
  progress_task Int
  created_at    DateTime   @default(now())
  created_by    String?    @db.Uuid
  updated_at    DateTime?  @updatedAt
  updated_by    String?    @db.Uuid

  // Relations
  created       user?      @relation("PlanCreatedBy", fields: [created_by], references: [user_id])
  updated       user?      @relation("PlanUpdatedBy", fields: [updated_by], references: [user_id])
}

// Resource Model
model resource {
  resource_id   String     @id @default(uuid()) @db.Uuid
  task_id    String?  @db.Uuid
  cost          Decimal    @default(0.00) @db.Decimal(15, 2)
  total         Decimal    @default(0.00) @db.Decimal(15, 2) // เอาเก็บค่าที่ * เสร็จแล้ว
  resource_name String     @db.VarChar(255)
  resource_type String     @db.VarChar(255)
  quantity      Int        @default(0) //เอาไว้ * กับ cost
  created_at    DateTime   @default(now())
  created_by    String?    @db.Uuid
  updated_at    DateTime?  @updatedAt
  updated_by    String?    @db.Uuid

  // Relations
  created       user?      @relation("ResourceCreatedBy", fields: [created_by], references: [user_id])
  updated       user?      @relation("ResourceUpdatedBy", fields: [updated_by], references: [user_id])
  // projects      project?   @relation(fields: [project_id], references: [project_id])
  tasks      task?   @relation(fields: [task_id], references: [task_id])
}
